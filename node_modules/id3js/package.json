{
  "name": "id3js",
  "version": "1.1.2",
  "author": {
    "name": "43081j"
  },
  "description": "A modern ID3 parser written completely in JavaScript, making use of typed arrays and the HTML5 File API",
  "main": "./dist/id3.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/43081j/id3.git"
  },
  "keywords": [
    "id3",
    "mp3",
    "parser"
  ],
  "license": "MIT",
  "readme": "id3.js - Javascript ID3 tag parser\r\n===\r\n\r\n**id3.js** is a JavaScript library for reading and parsing ID3 tags of MP3 files. **id3.js** can parse both ID3v1 and ID3v2 tags within a browser or Node environment. It also supports reading from local files (Node-only), same-origin URLs (AJAX) and File instances (HTML5 File API).\r\n\r\nAJAX\r\n===\r\n\r\n```html\r\n<script src=\"id3.min.js\"></script>\r\n<script type=\"text/javascript\">\r\nid3('/audio/track.mp3', function(err, tags) {\r\n\t// tags now contains v1, v2 and merged tags\r\n});\r\n</script>\r\n```\r\n\r\nHere the MP3 is being requested by partial AJAX requests, such that only the ID3v1 and ID3v2 tags are read rather than the file as a whole.\r\n\r\nLocal Files\r\n===\r\n\r\nFirst, install **id3.js** using NPM, the Node package manager.\r\n\r\n```\r\nnpm install id3js\r\n```\r\n\r\nThen use it like so:\r\n\r\n```javascript\r\nvar id3 = require('id3js');\r\n\r\nid3({ file: './track.mp3', type: id3.OPEN_LOCAL }, function(err, tags) {\r\n\t// tags now contains your ID3 tags\r\n});\r\n```\r\n\r\nNote that here, the type is set to 'local' directly so that **id3.js** will attempt to read from the local file-system using `fs`.\r\n\r\nThis will **only work under NodeJS**.\r\n\r\nFile API (HTML5)\r\n===\r\n\r\n```html\r\n<script src=\"id3.min.js\"></script>\r\n<script type=\"text/javascript\">\r\ndocument.querySelector('input[type=\"file\"]').onchange = function(e) {\r\n\tid3(this.files[0], function(err, tags) {\r\n\t\t// tags now contains your ID3 tags\r\n\t});\r\n}\r\n</script>\r\n```\r\n\r\nThis will read the data from the File instance using slices, so the entire file is not loaded into memory but rather only the tags.\r\n\r\nFormat\r\n===\r\n\r\nTags are passed as an object of the following format:\r\n\r\n```json\r\n{\r\n\t\"artist\": \"Song artist\",\r\n\t\"title\": \"Song name\",\r\n\t\"album\": \"Song album\",\r\n\t\"year\": \"2013\",\r\n\t\"v1\": {\r\n\t\t\"title\": \"ID3v1 title\",\r\n\t\t\"artist\": \"ID3v1 artist\",\r\n\t\t\"album\": \"ID3v1 album\",\r\n\t\t\"year\": \"ID3v1 year\",\r\n\t\t\"comment\": \"ID3v1 comment\",\r\n\t\t\"track\": \"ID3v1 track (e.g. 02)\",\r\n\t\t\"version\": 1.0\r\n\t},\r\n\t\"v2\": {\r\n\t\t\"artist\": \"ID3v2 artist\",\r\n\t\t\"album\": \"ID3v2 album\",\r\n\t\t\"version\": [4, 0]\r\n\t}\r\n}\r\n````\r\n\r\nThe `artist`, `title`, `album` and `year` properties will always exist, though they will default to null. These particular fields are filled by both ID3v1 and ID3v2, the latter taking the priority.\r\n\r\nThe `v2` object will contain a variable number of fields, depending on what is defined in the file, whereas the `v1` object will always have the same fields (some of which may be null).\r\n\r\nImages\r\n===\r\n\r\nOn occasion, an MP3 may have an image embedded in the ID3v2 tag. If this is the case, it will be available through `v2.image`. This has a structure like so:\r\n\r\n```json\r\n{\r\n\t\"type\": \"cover-front\",\r\n\t\"mime\": \"image/jpeg\",\r\n\t\"description\": null,\r\n\t\"data\": ArrayBuffer\r\n}\r\n```\r\n\r\nAs you can see, the data is provided as an `ArrayBuffer`. To access it, you may use a `DataView` or typed array such as `Uint8Array`.\r\n\r\nLicense\r\n===\r\n\r\nMIT\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/43081j/id3/issues"
  },
  "homepage": "https://github.com/43081j/id3",
  "_id": "id3js@1.1.2",
  "_from": "id3js@"
}
