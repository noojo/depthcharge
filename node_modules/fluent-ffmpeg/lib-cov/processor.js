// instrument by jscoverage, do not modifly this file
(function () {
  var BASE;
  if (typeof global === 'object') {
    BASE = global;
  } else if (typeof window === 'object') {
    BASE = window;
  } else {
    throw new Error('[jscoverage] unknow ENV!');
  }
  if (!BASE._$jscoverage) {
    BASE._$jscoverage = {};
    BASE._$jscoverage_cond = {};
    BASE._$jscoverage_done = function (file, line, express) {
      if (arguments.length === 2) {
        BASE._$jscoverage[file][line] ++;
      } else {
        BASE._$jscoverage_cond[file][line] ++;
        return express;
      }
    };
    BASE._$jscoverage_init = function (base, file, lines) {
      var tmp = [];
      for (var i = 0; i < lines.length; i ++) {
        tmp[lines[i]] = 0;
      }
      base[file] = tmp;
    };
  }
})();
_$jscoverage_init(_$jscoverage, "lib/processor.js",[1,11,12,14,16,18,20,21,24,26,27,30,32,33,36,37,41,42,44,45,49,50,51,52,53,54,55,59,60,61,62,63,65,66,67,70,72,74,75,76,78,79,83,84,87,89,90,94,97,100,101,104,105,106,107,109,110,116,117,118,119,120,122,123,125,126,127,128,132,133,134,143,145,146,146,147,152,153,155,156,159,168,169,169,170,174,175,183,184,184,185,189,190,191,192,193,194,195,198,203,212,213,214,214,215,215,216,219,220,221,222,225,225,227,228,230,231,240,240,241,242,245,247,248,250,251,251,252,253,254,257,257,258,259,259,260,261,262,263,264,271,273,275,276,277,280,281,284,285,286,289,291,292,295,298,300,302,303,304,305,306,311,312,313,314,315,316,317,321,323,324,325,326,328,329,333,334,337,338,340,341,342,343,344,346,351,352,356,357,358,360,361,362,364,365,369,370,371,374,375,378,379,380,382,385,389,391,392,397,399,402,403,407,408,409,410,412,413,414,415,416,417,418,424,425,426,428,429,430,431,435,436,438,439,441,443,444,448,449,453,454,455,458,460,464,466,469,470,472,474,476,477,478,481,490,491,492,493,497,499,504,507,509,512,513,516,522,523,525,526,528,529,531,532,536,537,539,540,541,544,545,548,550,552,555,556,557,560,563,564,565,566,567,569,573,578,580,581,582,583,584,586,588,597,598,601,605,606,609,610,613,614,619,620,622,625,628,629,630,631,632,633,635,636,639,640,643,644,645,646,648,649,650,651,654,655,656,657,661,662,664,665,666,667,670,671,676,677,678,682,683,685,688,689,692,693,696,697,698,701,707,708,712,714,715,717,718,719,720,722,723,725,729,730,734,736,737,739,741,743,744,748,749,750,751,756,757,760,761,764,765,769,770,774,776,778,779,780,782,783,784,787,788,790,791,793,794,799,801,803,804,806,807,809,810,812,813,815,816,821,822,823,824,829,831,833,834,840,845,846,850,851,854,855,856,857,859,862,863,866]);
_$jscoverage_init(_$jscoverage_cond, "lib/processor.js",[26,32,36,42,50,62,65,70,72,75,87,106,109,118,146,169,184,192,194,214,215,225,251,257,259,275,285,291,300,312,325,328,341,344,351,357,357,360,370,374,378,380,408,425,428,435,438,441,448,470,490,491,507,507,523,525,528,531,539,545,545,545,556,564,566,583,586,597,597,619,635,635,639,639,643,643,648,648,655,664,664,666,677,682,692,696,697,707,712,712,712,714,717,719,723,734,737,739,748,749,756,760,764,769,774,778,780,787,790,793,799,803,806,809,812,815,815,821,822,829,829,831,845,845,850,854,856,862]);
_$jscoverage["lib/processor.js"].source = ["var fs       = require('fs'),","    path     = require('path'),","    async    = require('async'),","    os       = require('os').platform(),","    exec     = require('child_process').exec,","    spawn    = require('child_process').spawn,","    Registry = require('./registry'),","","exports = module.exports = function Processor(command) {","  // constant for timeout checks","  command.prototype.E_PROCESSTIMEOUT = -99;","  command.prototype._codecDataAlreadySent = false;","","  command.prototype.saveToFile = function(targetfile, callback) {","","    callback = callback || function() {};","","    this.options.outputfile = path.normalize(targetfile);","","    var self = this;","    var options = this.options;","","    // parse options to command","    this._prepare(function(err) {","","      if (err) {","        return callback(null, null, err);","      }","","      var args = self.buildFfmpegArgs(false);","","      if (!args instanceof Array) {","        return callback (null, null, args);","      }","","      if (options.onStart) {","        self.options.onStart('ffmpeg ' + args.join(' '));","      }","","      // start conversion of file using spawn","      var ffmpegProc = self._spawnProcess(args);","      if (options.inputstream) {","        // pump input stream to stdin","        options.inputstream.resume();","        options.inputstream.pipe(ffmpegProc.stdin);","      }","","      //handle timeout if set","      var processTimer;","      if (options.timeout) {","        processTimer = setTimeout(function() {","          ffmpegProc.removeAllListeners('exit');","          ffmpegProc.kill('SIGKILL');","          options.logger.warn('process ran into a timeout (' + self.options.timeout + 's)');","          callback(self.E_PROCESSTIMEOUT, 'timeout');","        }, options.timeout * 1000);","      }","","      var stdout = '';","      var stderr = '';","      ffmpegProc.on('exit', function(code) {","        if (processTimer) {","          clearTimeout(processTimer);","        }","        if (code != 0) {","          var err = new Error('ffmpeg returned with code: ' + code);","          return callback(stdout, stderr, err);","        }","        // check if we have to run flvtool2 to update flash video meta data","        if (self.options._updateFlvMetadata === true) {","          // make sure we didn't try to determine this capability before","          if (!Registry.instance.get('capabilityFlvTool2')) {","            // check if flvtool2 is installed","            exec('which flvtool2', function(whichErr, whichStdOut, whichStdErr) {","              if (whichStdOut !== '') {","                Registry.instance.set('capabilityFlvTool2', true);","                // update metadata in flash video","                exec('flvtool2 -U ' + self.options.outputfile, function(flvtoolErr, flvtoolStdout, flvtoolStderr) {","                  callback(stdout, stderr, null);","                });","              } else {","                // flvtool2 is not installed, skip further checks","                Registry.instance.set('capabilityFlvTool2', false);","                callback(stdout, stderr, null);","              }","            });","          } else if (!Registry.instance.get('capabilityFlvTool2')) {","            // flvtool2 capability was checked before, execute update","            exec('flvtool2 -U ' + self.options.outputfile, function(flvtoolErr, flvtoolStdout, flvtoolStderr) {","              callback(stdout, stderr, null);","            });","          } else {","            // flvtool2 not installed, skip update","            callback(stdout, stderr, null);","          }","        } else {","          callback(stdout, stderr, null);","        }","      });","      ffmpegProc.stdout.on('data', function (data) {","        stdout += data;","      });","","      ffmpegProc.stderr.on('data', function (data) {","        stderr += data;","        if (options.onCodecData) {","          self._checkStdErrForCodec(stderr);","        }","        if (options.onProgress) {","          self._getProgressFromStdErr(stderr, self.metaData.durationsec);","        }","      });","    });","  };","","  command.prototype.mergeToFile = function(targetfile,callback){","    this.options.outputfile = path.normalize(targetfile);","    if(fs.existsSync(this.options.outputfile)){","      console.log(\"outputfile already exists. Do not merge.\");","      return;","    }","    var self = this;","    var options = this.options;","","    var getExtension = function(filename) {","        var filename = path.normalize(filename) || '';","        var ext = path.extname(filename).split('.');","        return ext[ext.length - 1];","    };","","    // creates intermediate copies of each video.","    var makeIntermediateFile = function(_mergeSource,_callback){","        var fname =  _mergeSource+\".temp.mpg\";","        var command = [","            self.ffmpegPath,","            [","                '-i', _mergeSource,","                '-qscale:v',1,","                fname","            ]","        ];","","        command[1] = self.options.additional.concat(command[1]).join(' ');","","        exec(command.join(' '),function(err, stdout, stderr) {","            if(err)throw err;","            _callback(fname);","        });","    };","","    // concat all created intermediate copies","    var concatIntermediates = function(target,intermediatesList,_callback){","        var fname =  path.normalize(target)+\".temp.merged.mpg\";","        // unescape paths","        for(var i=0; i<intermediatesList.length; i++){","            intermediatesList[i] = unescapePath(intermediatesList[i]);","        }","","        var command = [","            self.ffmpegPath,","            [","                '-loglevel','panic', //Generetes too much muxing warnings and fills default buffer of exec. This is to ignore them.","                '-i', 'concat:\"'+intermediatesList.join(\"|\")+'\"',","                '-c',\"copy\",","                fname","            ].join(' ')","        ];","        exec(command.join(' '), function(err, stdout, stderr) {","            if(err)throw err;","            _callback(fname);","        });","    };","","    var quantizeConcat = function(concatResult,numFiles,_callback){","        var command = [","            self.ffmpegPath,","            [","                '-i', concatResult,","                '-qscale:v',numFiles,","                targetfile","            ].join(' ')","        ];","        exec(command.join(' '), function(err, stdout, stderr) {","            if(err)throw err;","            _callback();","        });","    }","","    var deleteIntermediateFiles = function(intermediates,callback){","        async.each(intermediates,function(item,cb){","            fs.exists(unescapePath(item),function(exists){","              if(exists){","                fs.unlink(unescapePath(item),function (err) {","                  if (err){","                    cb(err);","                  }","                  else{","                    cb();","                  }","                });","              }","              else{","                cb();","              }","","            });","","        },callback);","","    }","","    var unescapePath = function(path){","        var f = path+\"\";","        if(f.indexOf('\"')==0)f = f.substring(1);","        if(f.lastIndexOf('\"')== f.length-1)f = f.substring(0, f.length-1);","        return f;","    }","","    var makeProgress = function(){","      progress.createdFiles = progress.createdFiles + 1;","      progress.precent = progress.createdFiles/progress.totalFiles*100;","      progressCallback(progress);","    }","","    if(options.mergeList.length<=0)throw new Error(\"No file added to be merged\");","","    var mergeList = options.mergeList;","    mergeList.unshift(options.inputfile);","","    var progressCallback = this.options.onProgress || function(){};","    var progress = {frames : 0,","                    currentFps: 0,","                    currentKbps: 0,","                    targetSize: 0,","                    timemark: 0,","                    percent: 0,","                    totalFiles: mergeList.length + 2,","                    createdFiles: 0}","","    var toDelete = mergeList.map(function(name){return name + \".temp.mpg\"});","    toDelete.push(this.options.outputfile + \".temp.merged.mpg\");","    deleteIntermediateFiles(toDelete);","","","    var intermediateFiles = [];","","    async.whilst(function(){","        return (mergeList.length != 0);","    },function(callback){","        makeIntermediateFile(mergeList.shift(),function(createdIntermediateFile){","            if(!createdIntermediateFile)throw new Error(\"Invalid intermediate file\");","            intermediateFiles.push(createdIntermediateFile);","            makeProgress();","            callback();","        })","    },function(err){","        if(err)throw err;","        concatIntermediates(targetfile,intermediateFiles,function(concatResult){","            if(!concatResult)throw new Error(\"Invalid concat result file\");","            makeProgress();","            quantizeConcat(concatResult,intermediateFiles.length,function(){","                makeProgress();","                intermediateFiles.push(concatResult); // add concatResult to intermediates list so it can be deleted too.","                deleteIntermediateFiles(intermediateFiles,callback);","            });","        });","    });","","  }","","  command.prototype.writeToStream = function(stream, callback) {","","    callback = callback || function(){};","","    if (!this.options._isStreamable) {","      this.options.logger.error('selected output format is not streamable');","      return callback(null, new Error('selected output format is not streamable'));","    }","","    var self    = this;","    var options = this.options;","","    // parse options to command","    this._prepare(function(err) {","      if (err) {","        return callback(null, err);","      }","","      var args = self.buildFfmpegArgs(true);","","      if (!args instanceof Array) {","        return callback(null, args);","      }","      // write data to stdout","      args.push('pipe:1');","","      // start conversion of file using spawn","      var ffmpegProc = self._spawnProcess(args);","","      if (options.inputstream) {","        // pump input stream to stdin","        options.inputstream.resume();","        options.inputstream.pipe(ffmpegProc.stdin);","        options.inputstream.on('error', function(){","          options.logger.debug(\"input stream closed, killing ffmpgeg process\");","          ffmpegProc.kill();","        });","      }","","      //handle timeout if set","      var processTimer;","      if (options.timeout) {","        processTimer = setTimeout(function() {","          ffmpegProc.removeAllListeners('exit');","          ffmpegProc.kill('SIGKILL');","          options.logger.warn('process ran into a timeout (' + options.timeout + 's)');","          callback(self.E_PROCESSTIMEOUT, 'timeout');","        }, options.timeout * 1000);","      }","","      var stderr = '';","","      ffmpegProc.stderr.on('data', function(data) {","        stderr += data;","        if (options.onCodecData) {","          self._checkStdErrForCodec(stderr);","        }","        if (options.onProgress) {","          self._getProgressFromStdErr(stderr, self.metaData.durationsec);","        }","      });","","      ffmpegProc.stdout.on('data', function(chunk) {","        stream.write(chunk);","      });","","      var fdClosed = false;","      var exitCode;","","      ffmpegProc.stdout.on('end', function() {","        if (stream.fd) {","          return fs.close(stream.fd, function() {","            fdClosed = true;","            if (typeof exitCode !== 'undefined') {","              // Process has already exited","              cb_(exitCode);","            }","          });","        }","","        if (stream.end) {","          stream.end();","        }","      });","","      var cb_ = function(code) {","        if (!options.inputstream || !options.inputstream.fd) {","          return callback(code, stderr);","        }","        if (!options.inputstream.fd) {","          options.inputstream.destroy();","          return callback(code, stderr);","        }","        fs.close(options.inputstream.fd, function() {","          callback(code, stderr);","        });","      };","","      ffmpegProc.on('exit', function(code, signal) {","        if (processTimer) {","          clearTimeout(processTimer);","        }","        // close file descriptor on outstream","        if(/^[a-z]+:\\/\\//.test(options.inputfile)) {","          return callback(code, stderr);","        }","","        if (stream.fd) {","          exitCode = code;","          if (fdClosed) {","            // Fd already closed","            cb_(code);","          }","        } else {","          cb_(code)","        }","      });","","      stream.on(\"close\", function()","      {","        options.logger.debug(\"Output stream closed, killing ffmpgeg process\");","        ffmpegProc.kill();","      });","    });","  };","","  command.prototype.takeScreenshots = function(config, folder, callback) {","","    callback = callback || function(){};","","    function _zeroPad(number, len) {","      len = len-String(number).length+2;","      return new Array(len<0?0:len).join('0')+number;","    }","","    function _renderOutputName(j, offset) {","      var result = filename;","      if(/%0*i/.test(result)) {","        var numlen = String(result.match(/%(0*)i/)[1]).length;","        result = result.replace(/%0*i/, _zeroPad(j, numlen));","      }","      result = result.replace('%s', offset);","      result = result.replace('%w', self.options.video.width);","      result = result.replace('%h', self.options.video.height);","      result = result.replace('%r', self.options.video.width+'x'+self.options.video.height);","      result = result.replace('%f', path.basename(self.options.inputfile));","      result = result.replace('%b', path.basename(self.options.inputfile, path.extname(self.options.inputfile)));","      return result;","    }","","    function _screenShotInternal(callback) {","","      // get correct dimensions","      self._prepare(function(err) {","        if(err) {","          return callback(err);","        }","        if (!self.metaData.durationsec) {","          var errString = 'meta data contains no duration, aborting screenshot creation';","          self.options.logger.warn(errString);","          return callback(new Error(errString));","        }","","        // check if all timemarks are inside duration","        if (Array.isArray(timemarks)) {","          for (var i = 0; i < timemarks.length; i++) {","            /* convert percentage to seconds */","            if( timemarks[i].indexOf('%') > 0 ) {","              timemarks[i] = (parseInt(timemarks[i], 10) / 100) * self.metaData.durationsec;","            }","            if (parseInt(timemarks[i], 10) > self.metaData.durationsec) {","              // remove timemark from array","              timemarks.splice(i, 1);","              --i;","            }","          }","          // if there are no more timemarks around, add one at end of the file","          if (timemarks.length === 0) {","            timemarks[0] = (self.metaData.durationsec * 0.9);","          }","        }","        // get positions for screenshots (using duration of file minus 10% to remove fade-in/fade-out)","        var secondOffset = (self.metaData.durationsec * 0.9) / screenshotcount;","        var donecount = 0;","        var series = [];","","        // reset iterator","        var j = 1;","","        var filenames = [];","","        // use async helper function to generate all screenshots and","        // fire callback just once after work is done","        async.until(","          function() {","            return j > screenshotcount;","          },","          function(taskcallback) {","            var offset;","            if (Array.isArray(timemarks)) {","              // get timemark for current iteration","              offset = timemarks[(j - 1)];","            } else {","              offset = secondOffset * j;","            }","            var fname = _renderOutputName(j, offset) + (fileextension ? fileextension : '.jpg');","            var target = self.escapedPath(path.join(folder, fname), true);","            var input = self.escapedPath(self.options.inputfile, true);","","            // build screenshot command","            var args = [","              '-ss', Math.floor(offset * 100) / 100,","              '-i', input,","              '-vcodec', 'mjpeg',","              '-vframes', '1',","              '-an',","              '-f', 'rawvideo',","              '-s', self.options.video.size,","            ];","            if (self.options.additional) {","              if (self.options.additional.length > 0) {","                self.options.additional.forEach(function(el) {","                  args.push(el);","                });","              }","            }","            args.push('-y', target);","","            var command = [","              self.ffmpegPath,","              args.join(\" \")","            ]","","            j++;","","            // only set niceness if running on a non-windows platform","            if (self.options.hasOwnProperty('_nice.level') && !os.match(/win(32|64)/)) {","              // execute ffmpeg through nice","              command.unshift('nice -n', self.options._nice.level||0);","            }","","            exec(command.join(' '), taskcallback);","            filenames.push(fname);","          },","          function(err) {","            callback(err, filenames);","          }","        );","      });","    }","","    var timemarks, screenshotcount, filename, fileextension;","    if (typeof config === 'object') {","      // use json object as config","      if (config.count) {","        screenshotcount = config.count;","      }","      if (config.timemarks) {","        timemarks = config.timemarks;","      }","      if (config.fileextension){","        fileextension = config.fileextension;","      }","    } else {","      // assume screenshot count as parameter","      screenshotcount = config;","      timemarks = null;","    }","    if (!this.options.video.size) {","      this.options.logger.warn(\"set size of thumbnails using 'withSize' method\");","      callback(new Error(\"set size of thumbnails using 'withSize' method\"));","    }","","    filename = config.filename || 'tn_%ss';","    if(!/%0*i/.test(filename) && Array.isArray(timemarks) && timemarks.length > 1 ) {","      // if there are multiple timemarks but no %i in filename add one","      // so we won't overwrite the same thumbnail with each timemark","      filename += '_%i';","    }","    folder = folder || '.';","","    var self = this;","","    // WORKAROUND: exists will be moved from path to fs with node v0.7","    var check = fs.exists;","    if (!check) {","      check = path.exists;","    }","","    this.options.requireMetaData = true;","","    // check target folder","    check(folder, function(exists) {","      if (!exists) {","        fs.mkdir(folder, '0755', function(err) {","          if (err !== null) {","            callback(err);","          } else {","            _screenShotInternal(callback);","          }","        });","      } else {","        _screenShotInternal(callback);","      }","    });","  };","","  command.prototype._getProgressFromStdErr = function(stderrString, totalDurationSec) {","    // get last stderr line","    var lastLine = stderrString.split(/\\r\\n|\\r|\\n/g);","    var ll = lastLine[lastLine.length - 2];","    var progress;","    if (ll) {","      progress = this._parseProgressLine(ll);","    }","    if (progress) {","      // build progress report object","      var ret = {","        frames: parseInt(progress.frame, 10),","        currentFps: parseInt(progress.fps, 10),","        currentKbps: parseFloat(progress.bitrate.replace(\"kbits/s\", \"\")),","        targetSize: parseInt(progress.size, 10),","        timemark: progress.time","      };","","      // calculate percent progress using duration","      if (totalDurationSec && totalDurationSec > 0) {","        ret.percent = (this.ffmpegTimemarkToSeconds(ret.timemark) / totalDurationSec) * 100;","      }","","      this.options.onProgress(ret);","    }","  };","","  command.prototype._parseProgressLine = function(line) {","    var progress = {};","","    // Remove all spaces after = and trim","    line  = line.replace(/=\\s+/g, '=').trim()","    progressParts = line.split(' ')","","    // Split every progress part by \"=\" to get key and value","    for(var i = 0; i < progressParts.length; i++) {","      var progressSplit = progressParts[i].split(\"=\", 2)","        , key = progressSplit[0]","        , value = progressSplit[1]","","      // This is not a progress line","      if(typeof value === \"undefined\")","        return null;","","      progress[key] = value","    }","","    return progress","  };","","  command.prototype._checkStdErrForCodec = function(stderrString) {","    var format= /Input #[0-9]+, ([^ ]+),/.exec(stderrString);","    var dur   = /Duration\\: ([^,]+)/.exec(stderrString);","    var audio = /Audio\\: (.*)/.exec(stderrString);","    var video = /Video\\: (.*)/.exec(stderrString);","    var codecObject = { format: '', audio: '', video: '', duration: '' };","","    if (format && format.length > 1) {","      codecObject.format = format[1];","    }","","    if (dur && dur.length > 1) {","      codecObject.duration = dur[1];","    }","","    if (audio && audio.length > 1) {","      audio = audio[1].split(', ');","      codecObject.audio = audio[0];","      codecObject.audio_details = audio;","    }","    if (video && video.length > 1) {","      video = video[1].split(', ');","      codecObject.video = video[0];","      codecObject.video_details = video;","    }","","    var codecInfoPassed = /Press (\\[q\\]|ctrl-c) to stop/.test(stderrString);","    if (codecInfoPassed) {","      this.options.onCodecData(codecObject);","      this.options.onCodecData = null;","    }","  };","","  command.prototype._spawnProcess = function(args, options) {","    var retProc = spawn(this.ffmpegPath, args, options);","    // only re-nice if running on a non-windows platform","    if (this.options.hasOwnProperty('_nice.level') && !os.match(/win(32|64)/)) {","      var niceLevel = this.options._nice.level || 0;","      if (niceLevel > 0) {","        niceLevel = '+' + niceLevel;","      }","      // renice the spawned process without waiting for callback","      var self = this;","      var command = [","        'renice -n', niceLevel,","        '-p', retProc.pid","      ].join(' ');","","      exec(command, function(err, stderr, stdout) {","        if (!err) {","          self.options.logger.info('successfully reniced process ' + retProc.pid + ' to ' + niceLevel + ' niceness!');","        }","      });","    }","    if (retProc.stderr) {","      retProc.stderr.setEncoding('utf8');","    }","    return retProc;","  };","","  command.prototype.buildFfmpegArgs = function(overrideOutputCheck) {","    var args = [];","","    // add startoffset and duration","    if (this.options.starttime) {","      args.push('-ss', this.options.starttime);","    }","","    if (this.options.video.loop) {","      if (this.atLeastVersion(this.meta().ffmpegversion, '0.9')){","        args.push('-loop', 1);","      }","      else{","        args.push('-loop_output', 1);","      }","    }","","","    // add input format","    if (this.options.fromFormat) {","      args.push('-f', this.options.fromFormat);","    }","","    // add input file (if using fs mode)","    if (this.options.inputfile && !this.options.inputstream && !this.options.inputlive) {","      // add input file fps","      if (this.options.video.fpsInput) {","        args.push('-r', this.options.video.fpsInput);","      }","      if (/^[a-z]+:\\/\\//.test(this.options.inputfile)) {","        args.push('-i', this.options.inputfile.replace(' ', '%20'));","      } else if (/%\\d*d/.test(this.options.inputfile)) { // multi-file format - http://ffmpeg.org/ffmpeg.html#image2-1","        args.push('-i', this.options.inputfile.replace(' ', '\\ '));","      } else {","        var fstats = fs.statSync(this.options.inputfile);","        if (fstats.isFile()) {","          // fix for spawn call with path containing spaces and quotes","          args.push('-i', this.options.inputfile.replace(/ /g, \"\\ \")","            .replace(/'/g, \"\\'\")","            .replace(/\"/g, \"\\\"\"));","        } else {","          this.options.logger.error('input file is not readable');","          throw new Error('input file is not readable');","        }","      }","    // check for input stream","    } else if (this.options.inputstream) {","      // push args to make ffmpeg read from stdin","      args.push('-i', '-');","    } else if (this.options.inputlive){","    \t//Check if input URI","    \tif(/^[a-z]+:\\/\\//.test(this.options.inputfile)) {","    \t\t// add input with live flag","    \t\targs.push('-i', this.options.inputfile.replace(' ', '%20')+' live=1');","    \t}else {","    \t\tthis.options.logger.error('live input URI is not valid');","    \t\tthrow new Error('live input URI is not valid');","    \t}","    }","","    if (this.options.otherInputs) {","      if (this.options.otherInputs.length > 0) {","        this.options.otherInputs.forEach(function(el) {","          args.push('-i', el);","        });","      }","    }","","    if (this.options.strictExperimental) {","      args.push('-strict', 'experimental');","    }","","    if (this.options.duration) {","      args.push('-t', this.options.duration);","    }","","    if (this.options.video.framecount) {","      args.push('-vframes', this.options.video.framecount);","    }","","    // add format","    if (this.options.format) {","      args.push('-f', this.options.format);","    }","","    // add video options","    if (this.options.video.skip) {","      // skip video stream completely (#45)","      args.push('-vn');","    } else {","      if (this.options.video.bitrate) {","        args.push('-b:v', this.options.video.bitrate + 'k');","        if (this.options._useConstantVideoBitrate) {","          // add parameters to ensure constant bitrate encoding","          args.push('-maxrate', this.options.video.bitrate + 'k');","          args.push('-minrate', this.options.video.bitrate + 'k');","          args.push('-bufsize', '3M');","        }","      }","      if (this.options.video.codec) {","        args.push('-vcodec', this.options.video.codec);","      }","      if (this.options.video.fps) {","        args.push('-r', this.options.video.fps);","      }","      if (this.options.video.aspect) {","        args.push('-aspect', this.options.video.aspect);","      }","    }","","    // add video options","    if (this.options.audio.skip) {","      // skip audio stream completely (#45)","      args.push('-an');","    } else {","      if (this.options.audio.bitrate) {","        args.push('-b:a', this.options.audio.bitrate + 'k');","      }","      if (this.options.audio.channels) {","        args.push('-ac', this.options.audio.channels);","      }","      if (this.options.audio.codec) {","        args.push('-acodec', this.options.audio.codec);","      }","      if (this.options.audio.frequency) {","        args.push('-ar', this.options.audio.frequency);","      }","      if (this.options.audio.quality || this.options.audio.quality === 0) {","        args.push('-aq', this.options.audio.quality);","      }","    }","","    // add additional options","    if (this.options.additional) {","      if (this.options.additional.length > 0) {","        this.options.additional.forEach(function(el) {","          args.push(el);","        });","      }","    }","","    if (this.options.video.pad && !this.options.video.skip) {","      // we have padding arguments, push","      if (this.atLeastVersion(this.metaData.ffmpegversion, '0.7')) {","        // padding is not supported ffmpeg < 0.7 (only using legacy commands which were replaced by vfilter calls)","        args.push('-vf');","        args.push('pad=' + this.options.video.pad.w +","          ':' + this.options.video.pad.h +","          ':' + this.options.video.pad.x +","          ':' + this.options.video.pad.y +","          ':' + this.options.video.padcolor);","      } else {","        return new Error(\"Your ffmpeg version \" + this.metaData.ffmpegversion + \" does not support padding\");","      }","    }","","    // add size and output file","    if (this.options.video.size && !this.options.video.skip) {","      args.push('-s', this.options.video.size);","    }","","    // add output file fps","    if (this.options.video.fpsOutput) {","      args.push('-r', this.options.video.fpsOutput);","    }","","    if (this.options.outputfile) {","      var target = this.escapedPath(this.options.outputfile, false);","      if (!os.match(/win(32|64)/)) {","        args.push('-y', target.replace(' ', '\\\\ '));","      } else {","        args.push('-y', target);","      }","    } else {","      if (!overrideOutputCheck) {","        this.options.logger.error('no outputfile specified');","      }","    }","    return args;","  };","","};",""];
_$jscoverage_done("lib/processor.js", 1);
var fs = require("fs"), path = require("path"), async = require("async"), os = require("os").platform(), exec = require("child_process").exec, spawn = require("child_process").spawn, Registry = require("./registry"), exports = module.exports = function Processor(command) {
    _$jscoverage_done("lib/processor.js", 11);
    command.prototype.E_PROCESSTIMEOUT = -99;
    _$jscoverage_done("lib/processor.js", 12);
    command.prototype._codecDataAlreadySent = false;
    _$jscoverage_done("lib/processor.js", 14);
    command.prototype.saveToFile = function(targetfile, callback) {
        _$jscoverage_done("lib/processor.js", 16);
        callback = callback || function() {};
        _$jscoverage_done("lib/processor.js", 18);
        this.options.outputfile = path.normalize(targetfile);
        _$jscoverage_done("lib/processor.js", 20);
        var self = this;
        _$jscoverage_done("lib/processor.js", 21);
        var options = this.options;
        _$jscoverage_done("lib/processor.js", 24);
        this._prepare(function(err) {
            _$jscoverage_done("lib/processor.js", 26);
            if (_$jscoverage_done("lib/processor.js", 26, err)) {
                _$jscoverage_done("lib/processor.js", 27);
                return callback(null, null, err);
            }
            _$jscoverage_done("lib/processor.js", 30);
            var args = self.buildFfmpegArgs(false);
            _$jscoverage_done("lib/processor.js", 32);
            if (_$jscoverage_done("lib/processor.js", 32, !args instanceof Array)) {
                _$jscoverage_done("lib/processor.js", 33);
                return callback(null, null, args);
            }
            _$jscoverage_done("lib/processor.js", 36);
            if (_$jscoverage_done("lib/processor.js", 36, options.onStart)) {
                _$jscoverage_done("lib/processor.js", 37);
                self.options.onStart("ffmpeg " + args.join(" "));
            }
            _$jscoverage_done("lib/processor.js", 41);
            var ffmpegProc = self._spawnProcess(args);
            _$jscoverage_done("lib/processor.js", 42);
            if (_$jscoverage_done("lib/processor.js", 42, options.inputstream)) {
                _$jscoverage_done("lib/processor.js", 44);
                options.inputstream.resume();
                _$jscoverage_done("lib/processor.js", 45);
                options.inputstream.pipe(ffmpegProc.stdin);
            }
            _$jscoverage_done("lib/processor.js", 49);
            var processTimer;
            _$jscoverage_done("lib/processor.js", 50);
            if (_$jscoverage_done("lib/processor.js", 50, options.timeout)) {
                _$jscoverage_done("lib/processor.js", 51);
                processTimer = setTimeout(function() {
                    _$jscoverage_done("lib/processor.js", 52);
                    ffmpegProc.removeAllListeners("exit");
                    _$jscoverage_done("lib/processor.js", 53);
                    ffmpegProc.kill("SIGKILL");
                    _$jscoverage_done("lib/processor.js", 54);
                    options.logger.warn("process ran into a timeout (" + self.options.timeout + "s)");
                    _$jscoverage_done("lib/processor.js", 55);
                    callback(self.E_PROCESSTIMEOUT, "timeout");
                }, options.timeout * 1e3);
            }
            _$jscoverage_done("lib/processor.js", 59);
            var stdout = "";
            _$jscoverage_done("lib/processor.js", 60);
            var stderr = "";
            _$jscoverage_done("lib/processor.js", 61);
            ffmpegProc.on("exit", function(code) {
                _$jscoverage_done("lib/processor.js", 62);
                if (_$jscoverage_done("lib/processor.js", 62, processTimer)) {
                    _$jscoverage_done("lib/processor.js", 63);
                    clearTimeout(processTimer);
                }
                _$jscoverage_done("lib/processor.js", 65);
                if (_$jscoverage_done("lib/processor.js", 65, code != 0)) {
                    _$jscoverage_done("lib/processor.js", 66);
                    var err = new Error("ffmpeg returned with code: " + code);
                    _$jscoverage_done("lib/processor.js", 67);
                    return callback(stdout, stderr, err);
                }
                _$jscoverage_done("lib/processor.js", 70);
                if (_$jscoverage_done("lib/processor.js", 70, self.options._updateFlvMetadata === true)) {
                    _$jscoverage_done("lib/processor.js", 72);
                    if (_$jscoverage_done("lib/processor.js", 72, !Registry.instance.get("capabilityFlvTool2"))) {
                        _$jscoverage_done("lib/processor.js", 74);
                        exec("which flvtool2", function(whichErr, whichStdOut, whichStdErr) {
                            _$jscoverage_done("lib/processor.js", 75);
                            if (_$jscoverage_done("lib/processor.js", 75, whichStdOut !== "")) {
                                _$jscoverage_done("lib/processor.js", 76);
                                Registry.instance.set("capabilityFlvTool2", true);
                                _$jscoverage_done("lib/processor.js", 78);
                                exec("flvtool2 -U " + self.options.outputfile, function(flvtoolErr, flvtoolStdout, flvtoolStderr) {
                                    _$jscoverage_done("lib/processor.js", 79);
                                    callback(stdout, stderr, null);
                                });
                            } else {
                                _$jscoverage_done("lib/processor.js", 83);
                                Registry.instance.set("capabilityFlvTool2", false);
                                _$jscoverage_done("lib/processor.js", 84);
                                callback(stdout, stderr, null);
                            }
                        });
                    } else {
                        _$jscoverage_done("lib/processor.js", 87);
                        if (_$jscoverage_done("lib/processor.js", 87, !Registry.instance.get("capabilityFlvTool2"))) {
                            _$jscoverage_done("lib/processor.js", 89);
                            exec("flvtool2 -U " + self.options.outputfile, function(flvtoolErr, flvtoolStdout, flvtoolStderr) {
                                _$jscoverage_done("lib/processor.js", 90);
                                callback(stdout, stderr, null);
                            });
                        } else {
                            _$jscoverage_done("lib/processor.js", 94);
                            callback(stdout, stderr, null);
                        }
                    }
                } else {
                    _$jscoverage_done("lib/processor.js", 97);
                    callback(stdout, stderr, null);
                }
            });
            _$jscoverage_done("lib/processor.js", 100);
            ffmpegProc.stdout.on("data", function(data) {
                _$jscoverage_done("lib/processor.js", 101);
                stdout += data;
            });
            _$jscoverage_done("lib/processor.js", 104);
            ffmpegProc.stderr.on("data", function(data) {
                _$jscoverage_done("lib/processor.js", 105);
                stderr += data;
                _$jscoverage_done("lib/processor.js", 106);
                if (_$jscoverage_done("lib/processor.js", 106, options.onCodecData)) {
                    _$jscoverage_done("lib/processor.js", 107);
                    self._checkStdErrForCodec(stderr);
                }
                _$jscoverage_done("lib/processor.js", 109);
                if (_$jscoverage_done("lib/processor.js", 109, options.onProgress)) {
                    _$jscoverage_done("lib/processor.js", 110);
                    self._getProgressFromStdErr(stderr, self.metaData.durationsec);
                }
            });
        });
    };
    _$jscoverage_done("lib/processor.js", 116);
    command.prototype.mergeToFile = function(targetfile, callback) {
        _$jscoverage_done("lib/processor.js", 117);
        this.options.outputfile = path.normalize(targetfile);
        _$jscoverage_done("lib/processor.js", 118);
        if (_$jscoverage_done("lib/processor.js", 118, fs.existsSync(this.options.outputfile))) {
            _$jscoverage_done("lib/processor.js", 119);
            console.log("outputfile already exists. Do not merge.");
            _$jscoverage_done("lib/processor.js", 120);
            return;
        }
        _$jscoverage_done("lib/processor.js", 122);
        var self = this;
        _$jscoverage_done("lib/processor.js", 123);
        var options = this.options;
        _$jscoverage_done("lib/processor.js", 125);
        var getExtension = function(filename) {
            _$jscoverage_done("lib/processor.js", 126);
            var filename = path.normalize(filename) || "";
            _$jscoverage_done("lib/processor.js", 127);
            var ext = path.extname(filename).split(".");
            _$jscoverage_done("lib/processor.js", 128);
            return ext[ext.length - 1];
        };
        _$jscoverage_done("lib/processor.js", 132);
        var makeIntermediateFile = function(_mergeSource, _callback) {
            _$jscoverage_done("lib/processor.js", 133);
            var fname = _mergeSource + ".temp.mpg";
            _$jscoverage_done("lib/processor.js", 134);
            var command = [ self.ffmpegPath, [ "-i", _mergeSource, "-qscale:v", 1, fname ] ];
            _$jscoverage_done("lib/processor.js", 143);
            command[1] = self.options.additional.concat(command[1]).join(" ");
            _$jscoverage_done("lib/processor.js", 145);
            exec(command.join(" "), function(err, stdout, stderr) {
                _$jscoverage_done("lib/processor.js", 146);
                if (_$jscoverage_done("lib/processor.js", 146, err)) {
                    _$jscoverage_done("lib/processor.js", 146);
                    throw err;
                }
                _$jscoverage_done("lib/processor.js", 147);
                _callback(fname);
            });
        };
        _$jscoverage_done("lib/processor.js", 152);
        var concatIntermediates = function(target, intermediatesList, _callback) {
            _$jscoverage_done("lib/processor.js", 153);
            var fname = path.normalize(target) + ".temp.merged.mpg";
            _$jscoverage_done("lib/processor.js", 155);
            for (var i = 0; i < intermediatesList.length; i++) {
                _$jscoverage_done("lib/processor.js", 156);
                intermediatesList[i] = unescapePath(intermediatesList[i]);
            }
            _$jscoverage_done("lib/processor.js", 159);
            var command = [ self.ffmpegPath, [ "-loglevel", "panic", "-i", 'concat:"' + intermediatesList.join("|") + '"', "-c", "copy", fname ].join(" ") ];
            _$jscoverage_done("lib/processor.js", 168);
            exec(command.join(" "), function(err, stdout, stderr) {
                _$jscoverage_done("lib/processor.js", 169);
                if (_$jscoverage_done("lib/processor.js", 169, err)) {
                    _$jscoverage_done("lib/processor.js", 169);
                    throw err;
                }
                _$jscoverage_done("lib/processor.js", 170);
                _callback(fname);
            });
        };
        _$jscoverage_done("lib/processor.js", 174);
        var quantizeConcat = function(concatResult, numFiles, _callback) {
            _$jscoverage_done("lib/processor.js", 175);
            var command = [ self.ffmpegPath, [ "-i", concatResult, "-qscale:v", numFiles, targetfile ].join(" ") ];
            _$jscoverage_done("lib/processor.js", 183);
            exec(command.join(" "), function(err, stdout, stderr) {
                _$jscoverage_done("lib/processor.js", 184);
                if (_$jscoverage_done("lib/processor.js", 184, err)) {
                    _$jscoverage_done("lib/processor.js", 184);
                    throw err;
                }
                _$jscoverage_done("lib/processor.js", 185);
                _callback();
            });
        };
        _$jscoverage_done("lib/processor.js", 189);
        var deleteIntermediateFiles = function(intermediates, callback) {
            _$jscoverage_done("lib/processor.js", 190);
            async.each(intermediates, function(item, cb) {
                _$jscoverage_done("lib/processor.js", 191);
                fs.exists(unescapePath(item), function(exists) {
                    _$jscoverage_done("lib/processor.js", 192);
                    if (_$jscoverage_done("lib/processor.js", 192, exists)) {
                        _$jscoverage_done("lib/processor.js", 193);
                        fs.unlink(unescapePath(item), function(err) {
                            _$jscoverage_done("lib/processor.js", 194);
                            if (_$jscoverage_done("lib/processor.js", 194, err)) {
                                _$jscoverage_done("lib/processor.js", 195);
                                cb(err);
                            } else {
                                _$jscoverage_done("lib/processor.js", 198);
                                cb();
                            }
                        });
                    } else {
                        _$jscoverage_done("lib/processor.js", 203);
                        cb();
                    }
                });
            }, callback);
        };
        _$jscoverage_done("lib/processor.js", 212);
        var unescapePath = function(path) {
            _$jscoverage_done("lib/processor.js", 213);
            var f = path + "";
            _$jscoverage_done("lib/processor.js", 214);
            if (_$jscoverage_done("lib/processor.js", 214, f.indexOf('"') == 0)) {
                _$jscoverage_done("lib/processor.js", 214);
                f = f.substring(1);
            }
            _$jscoverage_done("lib/processor.js", 215);
            if (_$jscoverage_done("lib/processor.js", 215, f.lastIndexOf('"') == f.length - 1)) {
                _$jscoverage_done("lib/processor.js", 215);
                f = f.substring(0, f.length - 1);
            }
            _$jscoverage_done("lib/processor.js", 216);
            return f;
        };
        _$jscoverage_done("lib/processor.js", 219);
        var makeProgress = function() {
            _$jscoverage_done("lib/processor.js", 220);
            progress.createdFiles = progress.createdFiles + 1;
            _$jscoverage_done("lib/processor.js", 221);
            progress.precent = progress.createdFiles / progress.totalFiles * 100;
            _$jscoverage_done("lib/processor.js", 222);
            progressCallback(progress);
        };
        _$jscoverage_done("lib/processor.js", 225);
        if (_$jscoverage_done("lib/processor.js", 225, options.mergeList.length <= 0)) {
            _$jscoverage_done("lib/processor.js", 225);
            throw new Error("No file added to be merged");
        }
        _$jscoverage_done("lib/processor.js", 227);
        var mergeList = options.mergeList;
        _$jscoverage_done("lib/processor.js", 228);
        mergeList.unshift(options.inputfile);
        _$jscoverage_done("lib/processor.js", 230);
        var progressCallback = this.options.onProgress || function() {};
        _$jscoverage_done("lib/processor.js", 231);
        var progress = {
            frames: 0,
            currentFps: 0,
            currentKbps: 0,
            targetSize: 0,
            timemark: 0,
            percent: 0,
            totalFiles: mergeList.length + 2,
            createdFiles: 0
        };
        _$jscoverage_done("lib/processor.js", 240);
        var toDelete = mergeList.map(function(name) {
            _$jscoverage_done("lib/processor.js", 240);
            return name + ".temp.mpg";
        });
        _$jscoverage_done("lib/processor.js", 241);
        toDelete.push(this.options.outputfile + ".temp.merged.mpg");
        _$jscoverage_done("lib/processor.js", 242);
        deleteIntermediateFiles(toDelete);
        _$jscoverage_done("lib/processor.js", 245);
        var intermediateFiles = [];
        _$jscoverage_done("lib/processor.js", 247);
        async.whilst(function() {
            _$jscoverage_done("lib/processor.js", 248);
            return mergeList.length != 0;
        }, function(callback) {
            _$jscoverage_done("lib/processor.js", 250);
            makeIntermediateFile(mergeList.shift(), function(createdIntermediateFile) {
                _$jscoverage_done("lib/processor.js", 251);
                if (_$jscoverage_done("lib/processor.js", 251, !createdIntermediateFile)) {
                    _$jscoverage_done("lib/processor.js", 251);
                    throw new Error("Invalid intermediate file");
                }
                _$jscoverage_done("lib/processor.js", 252);
                intermediateFiles.push(createdIntermediateFile);
                _$jscoverage_done("lib/processor.js", 253);
                makeProgress();
                _$jscoverage_done("lib/processor.js", 254);
                callback();
            });
        }, function(err) {
            _$jscoverage_done("lib/processor.js", 257);
            if (_$jscoverage_done("lib/processor.js", 257, err)) {
                _$jscoverage_done("lib/processor.js", 257);
                throw err;
            }
            _$jscoverage_done("lib/processor.js", 258);
            concatIntermediates(targetfile, intermediateFiles, function(concatResult) {
                _$jscoverage_done("lib/processor.js", 259);
                if (_$jscoverage_done("lib/processor.js", 259, !concatResult)) {
                    _$jscoverage_done("lib/processor.js", 259);
                    throw new Error("Invalid concat result file");
                }
                _$jscoverage_done("lib/processor.js", 260);
                makeProgress();
                _$jscoverage_done("lib/processor.js", 261);
                quantizeConcat(concatResult, intermediateFiles.length, function() {
                    _$jscoverage_done("lib/processor.js", 262);
                    makeProgress();
                    _$jscoverage_done("lib/processor.js", 263);
                    intermediateFiles.push(concatResult);
                    _$jscoverage_done("lib/processor.js", 264);
                    deleteIntermediateFiles(intermediateFiles, callback);
                });
            });
        });
    };
    _$jscoverage_done("lib/processor.js", 271);
    command.prototype.writeToStream = function(stream, callback) {
        _$jscoverage_done("lib/processor.js", 273);
        callback = callback || function() {};
        _$jscoverage_done("lib/processor.js", 275);
        if (_$jscoverage_done("lib/processor.js", 275, !this.options._isStreamable)) {
            _$jscoverage_done("lib/processor.js", 276);
            this.options.logger.error("selected output format is not streamable");
            _$jscoverage_done("lib/processor.js", 277);
            return callback(null, new Error("selected output format is not streamable"));
        }
        _$jscoverage_done("lib/processor.js", 280);
        var self = this;
        _$jscoverage_done("lib/processor.js", 281);
        var options = this.options;
        _$jscoverage_done("lib/processor.js", 284);
        this._prepare(function(err) {
            _$jscoverage_done("lib/processor.js", 285);
            if (_$jscoverage_done("lib/processor.js", 285, err)) {
                _$jscoverage_done("lib/processor.js", 286);
                return callback(null, err);
            }
            _$jscoverage_done("lib/processor.js", 289);
            var args = self.buildFfmpegArgs(true);
            _$jscoverage_done("lib/processor.js", 291);
            if (_$jscoverage_done("lib/processor.js", 291, !args instanceof Array)) {
                _$jscoverage_done("lib/processor.js", 292);
                return callback(null, args);
            }
            _$jscoverage_done("lib/processor.js", 295);
            args.push("pipe:1");
            _$jscoverage_done("lib/processor.js", 298);
            var ffmpegProc = self._spawnProcess(args);
            _$jscoverage_done("lib/processor.js", 300);
            if (_$jscoverage_done("lib/processor.js", 300, options.inputstream)) {
                _$jscoverage_done("lib/processor.js", 302);
                options.inputstream.resume();
                _$jscoverage_done("lib/processor.js", 303);
                options.inputstream.pipe(ffmpegProc.stdin);
                _$jscoverage_done("lib/processor.js", 304);
                options.inputstream.on("error", function() {
                    _$jscoverage_done("lib/processor.js", 305);
                    options.logger.debug("input stream closed, killing ffmpgeg process");
                    _$jscoverage_done("lib/processor.js", 306);
                    ffmpegProc.kill();
                });
            }
            _$jscoverage_done("lib/processor.js", 311);
            var processTimer;
            _$jscoverage_done("lib/processor.js", 312);
            if (_$jscoverage_done("lib/processor.js", 312, options.timeout)) {
                _$jscoverage_done("lib/processor.js", 313);
                processTimer = setTimeout(function() {
                    _$jscoverage_done("lib/processor.js", 314);
                    ffmpegProc.removeAllListeners("exit");
                    _$jscoverage_done("lib/processor.js", 315);
                    ffmpegProc.kill("SIGKILL");
                    _$jscoverage_done("lib/processor.js", 316);
                    options.logger.warn("process ran into a timeout (" + options.timeout + "s)");
                    _$jscoverage_done("lib/processor.js", 317);
                    callback(self.E_PROCESSTIMEOUT, "timeout");
                }, options.timeout * 1e3);
            }
            _$jscoverage_done("lib/processor.js", 321);
            var stderr = "";
            _$jscoverage_done("lib/processor.js", 323);
            ffmpegProc.stderr.on("data", function(data) {
                _$jscoverage_done("lib/processor.js", 324);
                stderr += data;
                _$jscoverage_done("lib/processor.js", 325);
                if (_$jscoverage_done("lib/processor.js", 325, options.onCodecData)) {
                    _$jscoverage_done("lib/processor.js", 326);
                    self._checkStdErrForCodec(stderr);
                }
                _$jscoverage_done("lib/processor.js", 328);
                if (_$jscoverage_done("lib/processor.js", 328, options.onProgress)) {
                    _$jscoverage_done("lib/processor.js", 329);
                    self._getProgressFromStdErr(stderr, self.metaData.durationsec);
                }
            });
            _$jscoverage_done("lib/processor.js", 333);
            ffmpegProc.stdout.on("data", function(chunk) {
                _$jscoverage_done("lib/processor.js", 334);
                stream.write(chunk);
            });
            _$jscoverage_done("lib/processor.js", 337);
            var fdClosed = false;
            _$jscoverage_done("lib/processor.js", 338);
            var exitCode;
            _$jscoverage_done("lib/processor.js", 340);
            ffmpegProc.stdout.on("end", function() {
                _$jscoverage_done("lib/processor.js", 341);
                if (_$jscoverage_done("lib/processor.js", 341, stream.fd)) {
                    _$jscoverage_done("lib/processor.js", 342);
                    return fs.close(stream.fd, function() {
                        _$jscoverage_done("lib/processor.js", 343);
                        fdClosed = true;
                        _$jscoverage_done("lib/processor.js", 344);
                        if (_$jscoverage_done("lib/processor.js", 344, typeof exitCode !== "undefined")) {
                            _$jscoverage_done("lib/processor.js", 346);
                            cb_(exitCode);
                        }
                    });
                }
                _$jscoverage_done("lib/processor.js", 351);
                if (_$jscoverage_done("lib/processor.js", 351, stream.end)) {
                    _$jscoverage_done("lib/processor.js", 352);
                    stream.end();
                }
            });
            _$jscoverage_done("lib/processor.js", 356);
            var cb_ = function(code) {
                _$jscoverage_done("lib/processor.js", 357);
                if (_$jscoverage_done("lib/processor.js", 357, !options.inputstream) || _$jscoverage_done("lib/processor.js", 357, !options.inputstream.fd)) {
                    _$jscoverage_done("lib/processor.js", 358);
                    return callback(code, stderr);
                }
                _$jscoverage_done("lib/processor.js", 360);
                if (_$jscoverage_done("lib/processor.js", 360, !options.inputstream.fd)) {
                    _$jscoverage_done("lib/processor.js", 361);
                    options.inputstream.destroy();
                    _$jscoverage_done("lib/processor.js", 362);
                    return callback(code, stderr);
                }
                _$jscoverage_done("lib/processor.js", 364);
                fs.close(options.inputstream.fd, function() {
                    _$jscoverage_done("lib/processor.js", 365);
                    callback(code, stderr);
                });
            };
            _$jscoverage_done("lib/processor.js", 369);
            ffmpegProc.on("exit", function(code, signal) {
                _$jscoverage_done("lib/processor.js", 370);
                if (_$jscoverage_done("lib/processor.js", 370, processTimer)) {
                    _$jscoverage_done("lib/processor.js", 371);
                    clearTimeout(processTimer);
                }
                _$jscoverage_done("lib/processor.js", 374);
                if (_$jscoverage_done("lib/processor.js", 374, /^[a-z]+:\/\//.test(options.inputfile))) {
                    _$jscoverage_done("lib/processor.js", 375);
                    return callback(code, stderr);
                }
                _$jscoverage_done("lib/processor.js", 378);
                if (_$jscoverage_done("lib/processor.js", 378, stream.fd)) {
                    _$jscoverage_done("lib/processor.js", 379);
                    exitCode = code;
                    _$jscoverage_done("lib/processor.js", 380);
                    if (_$jscoverage_done("lib/processor.js", 380, fdClosed)) {
                        _$jscoverage_done("lib/processor.js", 382);
                        cb_(code);
                    }
                } else {
                    _$jscoverage_done("lib/processor.js", 385);
                    cb_(code);
                }
            });
            _$jscoverage_done("lib/processor.js", 389);
            stream.on("close", function() {
                _$jscoverage_done("lib/processor.js", 391);
                options.logger.debug("Output stream closed, killing ffmpgeg process");
                _$jscoverage_done("lib/processor.js", 392);
                ffmpegProc.kill();
            });
        });
    };
    _$jscoverage_done("lib/processor.js", 397);
    command.prototype.takeScreenshots = function(config, folder, callback) {
        _$jscoverage_done("lib/processor.js", 399);
        callback = callback || function() {};
        function _zeroPad(number, len) {
            _$jscoverage_done("lib/processor.js", 402);
            len = len - String(number).length + 2;
            _$jscoverage_done("lib/processor.js", 403);
            return (new Array(len < 0 ? 0 : len)).join("0") + number;
        }
        function _renderOutputName(j, offset) {
            _$jscoverage_done("lib/processor.js", 407);
            var result = filename;
            _$jscoverage_done("lib/processor.js", 408);
            if (_$jscoverage_done("lib/processor.js", 408, /%0*i/.test(result))) {
                _$jscoverage_done("lib/processor.js", 409);
                var numlen = String(result.match(/%(0*)i/)[1]).length;
                _$jscoverage_done("lib/processor.js", 410);
                result = result.replace(/%0*i/, _zeroPad(j, numlen));
            }
            _$jscoverage_done("lib/processor.js", 412);
            result = result.replace("%s", offset);
            _$jscoverage_done("lib/processor.js", 413);
            result = result.replace("%w", self.options.video.width);
            _$jscoverage_done("lib/processor.js", 414);
            result = result.replace("%h", self.options.video.height);
            _$jscoverage_done("lib/processor.js", 415);
            result = result.replace("%r", self.options.video.width + "x" + self.options.video.height);
            _$jscoverage_done("lib/processor.js", 416);
            result = result.replace("%f", path.basename(self.options.inputfile));
            _$jscoverage_done("lib/processor.js", 417);
            result = result.replace("%b", path.basename(self.options.inputfile, path.extname(self.options.inputfile)));
            _$jscoverage_done("lib/processor.js", 418);
            return result;
        }
        function _screenShotInternal(callback) {
            _$jscoverage_done("lib/processor.js", 424);
            self._prepare(function(err) {
                _$jscoverage_done("lib/processor.js", 425);
                if (_$jscoverage_done("lib/processor.js", 425, err)) {
                    _$jscoverage_done("lib/processor.js", 426);
                    return callback(err);
                }
                _$jscoverage_done("lib/processor.js", 428);
                if (_$jscoverage_done("lib/processor.js", 428, !self.metaData.durationsec)) {
                    _$jscoverage_done("lib/processor.js", 429);
                    var errString = "meta data contains no duration, aborting screenshot creation";
                    _$jscoverage_done("lib/processor.js", 430);
                    self.options.logger.warn(errString);
                    _$jscoverage_done("lib/processor.js", 431);
                    return callback(new Error(errString));
                }
                _$jscoverage_done("lib/processor.js", 435);
                if (_$jscoverage_done("lib/processor.js", 435, Array.isArray(timemarks))) {
                    _$jscoverage_done("lib/processor.js", 436);
                    for (var i = 0; i < timemarks.length; i++) {
                        _$jscoverage_done("lib/processor.js", 438);
                        if (_$jscoverage_done("lib/processor.js", 438, timemarks[i].indexOf("%") > 0)) {
                            _$jscoverage_done("lib/processor.js", 439);
                            timemarks[i] = parseInt(timemarks[i], 10) / 100 * self.metaData.durationsec;
                        }
                        _$jscoverage_done("lib/processor.js", 441);
                        if (_$jscoverage_done("lib/processor.js", 441, parseInt(timemarks[i], 10) > self.metaData.durationsec)) {
                            _$jscoverage_done("lib/processor.js", 443);
                            timemarks.splice(i, 1);
                            _$jscoverage_done("lib/processor.js", 444);
                            --i;
                        }
                    }
                    _$jscoverage_done("lib/processor.js", 448);
                    if (_$jscoverage_done("lib/processor.js", 448, timemarks.length === 0)) {
                        _$jscoverage_done("lib/processor.js", 449);
                        timemarks[0] = self.metaData.durationsec * .9;
                    }
                }
                _$jscoverage_done("lib/processor.js", 453);
                var secondOffset = self.metaData.durationsec * .9 / screenshotcount;
                _$jscoverage_done("lib/processor.js", 454);
                var donecount = 0;
                _$jscoverage_done("lib/processor.js", 455);
                var series = [];
                _$jscoverage_done("lib/processor.js", 458);
                var j = 1;
                _$jscoverage_done("lib/processor.js", 460);
                var filenames = [];
                _$jscoverage_done("lib/processor.js", 464);
                async.until(function() {
                    _$jscoverage_done("lib/processor.js", 466);
                    return j > screenshotcount;
                }, function(taskcallback) {
                    _$jscoverage_done("lib/processor.js", 469);
                    var offset;
                    _$jscoverage_done("lib/processor.js", 470);
                    if (_$jscoverage_done("lib/processor.js", 470, Array.isArray(timemarks))) {
                        _$jscoverage_done("lib/processor.js", 472);
                        offset = timemarks[j - 1];
                    } else {
                        _$jscoverage_done("lib/processor.js", 474);
                        offset = secondOffset * j;
                    }
                    _$jscoverage_done("lib/processor.js", 476);
                    var fname = _renderOutputName(j, offset) + (fileextension ? fileextension : ".jpg");
                    _$jscoverage_done("lib/processor.js", 477);
                    var target = self.escapedPath(path.join(folder, fname), true);
                    _$jscoverage_done("lib/processor.js", 478);
                    var input = self.escapedPath(self.options.inputfile, true);
                    _$jscoverage_done("lib/processor.js", 481);
                    var args = [ "-ss", Math.floor(offset * 100) / 100, "-i", input, "-vcodec", "mjpeg", "-vframes", "1", "-an", "-f", "rawvideo", "-s", self.options.video.size ];
                    _$jscoverage_done("lib/processor.js", 490);
                    if (_$jscoverage_done("lib/processor.js", 490, self.options.additional)) {
                        _$jscoverage_done("lib/processor.js", 491);
                        if (_$jscoverage_done("lib/processor.js", 491, self.options.additional.length > 0)) {
                            _$jscoverage_done("lib/processor.js", 492);
                            self.options.additional.forEach(function(el) {
                                _$jscoverage_done("lib/processor.js", 493);
                                args.push(el);
                            });
                        }
                    }
                    _$jscoverage_done("lib/processor.js", 497);
                    args.push("-y", target);
                    _$jscoverage_done("lib/processor.js", 499);
                    var command = [ self.ffmpegPath, args.join(" ") ];
                    _$jscoverage_done("lib/processor.js", 504);
                    j++;
                    _$jscoverage_done("lib/processor.js", 507);
                    if (_$jscoverage_done("lib/processor.js", 507, self.options.hasOwnProperty("_nice.level")) && _$jscoverage_done("lib/processor.js", 507, !os.match(/win(32|64)/))) {
                        _$jscoverage_done("lib/processor.js", 509);
                        command.unshift("nice -n", self.options._nice.level || 0);
                    }
                    _$jscoverage_done("lib/processor.js", 512);
                    exec(command.join(" "), taskcallback);
                    _$jscoverage_done("lib/processor.js", 513);
                    filenames.push(fname);
                }, function(err) {
                    _$jscoverage_done("lib/processor.js", 516);
                    callback(err, filenames);
                });
            });
        }
        _$jscoverage_done("lib/processor.js", 522);
        var timemarks, screenshotcount, filename, fileextension;
        _$jscoverage_done("lib/processor.js", 523);
        if (_$jscoverage_done("lib/processor.js", 523, typeof config === "object")) {
            _$jscoverage_done("lib/processor.js", 525);
            if (_$jscoverage_done("lib/processor.js", 525, config.count)) {
                _$jscoverage_done("lib/processor.js", 526);
                screenshotcount = config.count;
            }
            _$jscoverage_done("lib/processor.js", 528);
            if (_$jscoverage_done("lib/processor.js", 528, config.timemarks)) {
                _$jscoverage_done("lib/processor.js", 529);
                timemarks = config.timemarks;
            }
            _$jscoverage_done("lib/processor.js", 531);
            if (_$jscoverage_done("lib/processor.js", 531, config.fileextension)) {
                _$jscoverage_done("lib/processor.js", 532);
                fileextension = config.fileextension;
            }
        } else {
            _$jscoverage_done("lib/processor.js", 536);
            screenshotcount = config;
            _$jscoverage_done("lib/processor.js", 537);
            timemarks = null;
        }
        _$jscoverage_done("lib/processor.js", 539);
        if (_$jscoverage_done("lib/processor.js", 539, !this.options.video.size)) {
            _$jscoverage_done("lib/processor.js", 540);
            this.options.logger.warn("set size of thumbnails using 'withSize' method");
            _$jscoverage_done("lib/processor.js", 541);
            callback(new Error("set size of thumbnails using 'withSize' method"));
        }
        _$jscoverage_done("lib/processor.js", 544);
        filename = config.filename || "tn_%ss";
        _$jscoverage_done("lib/processor.js", 545);
        if (_$jscoverage_done("lib/processor.js", 545, !/%0*i/.test(filename)) && _$jscoverage_done("lib/processor.js", 545, Array.isArray(timemarks)) && _$jscoverage_done("lib/processor.js", 545, timemarks.length > 1)) {
            _$jscoverage_done("lib/processor.js", 548);
            filename += "_%i";
        }
        _$jscoverage_done("lib/processor.js", 550);
        folder = folder || ".";
        _$jscoverage_done("lib/processor.js", 552);
        var self = this;
        _$jscoverage_done("lib/processor.js", 555);
        var check = fs.exists;
        _$jscoverage_done("lib/processor.js", 556);
        if (_$jscoverage_done("lib/processor.js", 556, !check)) {
            _$jscoverage_done("lib/processor.js", 557);
            check = path.exists;
        }
        _$jscoverage_done("lib/processor.js", 560);
        this.options.requireMetaData = true;
        _$jscoverage_done("lib/processor.js", 563);
        check(folder, function(exists) {
            _$jscoverage_done("lib/processor.js", 564);
            if (_$jscoverage_done("lib/processor.js", 564, !exists)) {
                _$jscoverage_done("lib/processor.js", 565);
                fs.mkdir(folder, "0755", function(err) {
                    _$jscoverage_done("lib/processor.js", 566);
                    if (_$jscoverage_done("lib/processor.js", 566, err !== null)) {
                        _$jscoverage_done("lib/processor.js", 567);
                        callback(err);
                    } else {
                        _$jscoverage_done("lib/processor.js", 569);
                        _screenShotInternal(callback);
                    }
                });
            } else {
                _$jscoverage_done("lib/processor.js", 573);
                _screenShotInternal(callback);
            }
        });
    };
    _$jscoverage_done("lib/processor.js", 578);
    command.prototype._getProgressFromStdErr = function(stderrString, totalDurationSec) {
        _$jscoverage_done("lib/processor.js", 580);
        var lastLine = stderrString.split(/\r\n|\r|\n/g);
        _$jscoverage_done("lib/processor.js", 581);
        var ll = lastLine[lastLine.length - 2];
        _$jscoverage_done("lib/processor.js", 582);
        var progress;
        _$jscoverage_done("lib/processor.js", 583);
        if (_$jscoverage_done("lib/processor.js", 583, ll)) {
            _$jscoverage_done("lib/processor.js", 584);
            progress = this._parseProgressLine(ll);
        }
        _$jscoverage_done("lib/processor.js", 586);
        if (_$jscoverage_done("lib/processor.js", 586, progress)) {
            _$jscoverage_done("lib/processor.js", 588);
            var ret = {
                frames: parseInt(progress.frame, 10),
                currentFps: parseInt(progress.fps, 10),
                currentKbps: parseFloat(progress.bitrate.replace("kbits/s", "")),
                targetSize: parseInt(progress.size, 10),
                timemark: progress.time
            };
            _$jscoverage_done("lib/processor.js", 597);
            if (_$jscoverage_done("lib/processor.js", 597, totalDurationSec) && _$jscoverage_done("lib/processor.js", 597, totalDurationSec > 0)) {
                _$jscoverage_done("lib/processor.js", 598);
                ret.percent = this.ffmpegTimemarkToSeconds(ret.timemark) / totalDurationSec * 100;
            }
            _$jscoverage_done("lib/processor.js", 601);
            this.options.onProgress(ret);
        }
    };
    _$jscoverage_done("lib/processor.js", 605);
    command.prototype._parseProgressLine = function(line) {
        _$jscoverage_done("lib/processor.js", 606);
        var progress = {};
        _$jscoverage_done("lib/processor.js", 609);
        line = line.replace(/=\s+/g, "=").trim();
        _$jscoverage_done("lib/processor.js", 610);
        progressParts = line.split(" ");
        _$jscoverage_done("lib/processor.js", 613);
        for (var i = 0; i < progressParts.length; i++) {
            _$jscoverage_done("lib/processor.js", 614);
            var progressSplit = progressParts[i].split("=", 2), key = progressSplit[0], value = progressSplit[1];
            _$jscoverage_done("lib/processor.js", 619);
            if (_$jscoverage_done("lib/processor.js", 619, typeof value === "undefined")) {
                _$jscoverage_done("lib/processor.js", 620);
                return null;
            }
            _$jscoverage_done("lib/processor.js", 622);
            progress[key] = value;
        }
        _$jscoverage_done("lib/processor.js", 625);
        return progress;
    };
    _$jscoverage_done("lib/processor.js", 628);
    command.prototype._checkStdErrForCodec = function(stderrString) {
        _$jscoverage_done("lib/processor.js", 629);
        var format = /Input #[0-9]+, ([^ ]+),/.exec(stderrString);
        _$jscoverage_done("lib/processor.js", 630);
        var dur = /Duration\: ([^,]+)/.exec(stderrString);
        _$jscoverage_done("lib/processor.js", 631);
        var audio = /Audio\: (.*)/.exec(stderrString);
        _$jscoverage_done("lib/processor.js", 632);
        var video = /Video\: (.*)/.exec(stderrString);
        _$jscoverage_done("lib/processor.js", 633);
        var codecObject = {
            format: "",
            audio: "",
            video: "",
            duration: ""
        };
        _$jscoverage_done("lib/processor.js", 635);
        if (_$jscoverage_done("lib/processor.js", 635, format) && _$jscoverage_done("lib/processor.js", 635, format.length > 1)) {
            _$jscoverage_done("lib/processor.js", 636);
            codecObject.format = format[1];
        }
        _$jscoverage_done("lib/processor.js", 639);
        if (_$jscoverage_done("lib/processor.js", 639, dur) && _$jscoverage_done("lib/processor.js", 639, dur.length > 1)) {
            _$jscoverage_done("lib/processor.js", 640);
            codecObject.duration = dur[1];
        }
        _$jscoverage_done("lib/processor.js", 643);
        if (_$jscoverage_done("lib/processor.js", 643, audio) && _$jscoverage_done("lib/processor.js", 643, audio.length > 1)) {
            _$jscoverage_done("lib/processor.js", 644);
            audio = audio[1].split(", ");
            _$jscoverage_done("lib/processor.js", 645);
            codecObject.audio = audio[0];
            _$jscoverage_done("lib/processor.js", 646);
            codecObject.audio_details = audio;
        }
        _$jscoverage_done("lib/processor.js", 648);
        if (_$jscoverage_done("lib/processor.js", 648, video) && _$jscoverage_done("lib/processor.js", 648, video.length > 1)) {
            _$jscoverage_done("lib/processor.js", 649);
            video = video[1].split(", ");
            _$jscoverage_done("lib/processor.js", 650);
            codecObject.video = video[0];
            _$jscoverage_done("lib/processor.js", 651);
            codecObject.video_details = video;
        }
        _$jscoverage_done("lib/processor.js", 654);
        var codecInfoPassed = /Press (\[q\]|ctrl-c) to stop/.test(stderrString);
        _$jscoverage_done("lib/processor.js", 655);
        if (_$jscoverage_done("lib/processor.js", 655, codecInfoPassed)) {
            _$jscoverage_done("lib/processor.js", 656);
            this.options.onCodecData(codecObject);
            _$jscoverage_done("lib/processor.js", 657);
            this.options.onCodecData = null;
        }
    };
    _$jscoverage_done("lib/processor.js", 661);
    command.prototype._spawnProcess = function(args, options) {
        _$jscoverage_done("lib/processor.js", 662);
        var retProc = spawn(this.ffmpegPath, args, options);
        _$jscoverage_done("lib/processor.js", 664);
        if (_$jscoverage_done("lib/processor.js", 664, this.options.hasOwnProperty("_nice.level")) && _$jscoverage_done("lib/processor.js", 664, !os.match(/win(32|64)/))) {
            _$jscoverage_done("lib/processor.js", 665);
            var niceLevel = this.options._nice.level || 0;
            _$jscoverage_done("lib/processor.js", 666);
            if (_$jscoverage_done("lib/processor.js", 666, niceLevel > 0)) {
                _$jscoverage_done("lib/processor.js", 667);
                niceLevel = "+" + niceLevel;
            }
            _$jscoverage_done("lib/processor.js", 670);
            var self = this;
            _$jscoverage_done("lib/processor.js", 671);
            var command = [ "renice -n", niceLevel, "-p", retProc.pid ].join(" ");
            _$jscoverage_done("lib/processor.js", 676);
            exec(command, function(err, stderr, stdout) {
                _$jscoverage_done("lib/processor.js", 677);
                if (_$jscoverage_done("lib/processor.js", 677, !err)) {
                    _$jscoverage_done("lib/processor.js", 678);
                    self.options.logger.info("successfully reniced process " + retProc.pid + " to " + niceLevel + " niceness!");
                }
            });
        }
        _$jscoverage_done("lib/processor.js", 682);
        if (_$jscoverage_done("lib/processor.js", 682, retProc.stderr)) {
            _$jscoverage_done("lib/processor.js", 683);
            retProc.stderr.setEncoding("utf8");
        }
        _$jscoverage_done("lib/processor.js", 685);
        return retProc;
    };
    _$jscoverage_done("lib/processor.js", 688);
    command.prototype.buildFfmpegArgs = function(overrideOutputCheck) {
        _$jscoverage_done("lib/processor.js", 689);
        var args = [];
        _$jscoverage_done("lib/processor.js", 692);
        if (_$jscoverage_done("lib/processor.js", 692, this.options.starttime)) {
            _$jscoverage_done("lib/processor.js", 693);
            args.push("-ss", this.options.starttime);
        }
        _$jscoverage_done("lib/processor.js", 696);
        if (_$jscoverage_done("lib/processor.js", 696, this.options.video.loop)) {
            _$jscoverage_done("lib/processor.js", 697);
            if (_$jscoverage_done("lib/processor.js", 697, this.atLeastVersion(this.meta().ffmpegversion, "0.9"))) {
                _$jscoverage_done("lib/processor.js", 698);
                args.push("-loop", 1);
            } else {
                _$jscoverage_done("lib/processor.js", 701);
                args.push("-loop_output", 1);
            }
        }
        _$jscoverage_done("lib/processor.js", 707);
        if (_$jscoverage_done("lib/processor.js", 707, this.options.fromFormat)) {
            _$jscoverage_done("lib/processor.js", 708);
            args.push("-f", this.options.fromFormat);
        }
        _$jscoverage_done("lib/processor.js", 712);
        if (_$jscoverage_done("lib/processor.js", 712, this.options.inputfile) && _$jscoverage_done("lib/processor.js", 712, !this.options.inputstream) && _$jscoverage_done("lib/processor.js", 712, !this.options.inputlive)) {
            _$jscoverage_done("lib/processor.js", 714);
            if (_$jscoverage_done("lib/processor.js", 714, this.options.video.fpsInput)) {
                _$jscoverage_done("lib/processor.js", 715);
                args.push("-r", this.options.video.fpsInput);
            }
            _$jscoverage_done("lib/processor.js", 717);
            if (_$jscoverage_done("lib/processor.js", 717, /^[a-z]+:\/\//.test(this.options.inputfile))) {
                _$jscoverage_done("lib/processor.js", 718);
                args.push("-i", this.options.inputfile.replace(" ", "%20"));
            } else {
                _$jscoverage_done("lib/processor.js", 719);
                if (_$jscoverage_done("lib/processor.js", 719, /%\d*d/.test(this.options.inputfile))) {
                    _$jscoverage_done("lib/processor.js", 720);
                    args.push("-i", this.options.inputfile.replace(" ", " "));
                } else {
                    _$jscoverage_done("lib/processor.js", 722);
                    var fstats = fs.statSync(this.options.inputfile);
                    _$jscoverage_done("lib/processor.js", 723);
                    if (_$jscoverage_done("lib/processor.js", 723, fstats.isFile())) {
                        _$jscoverage_done("lib/processor.js", 725);
                        args.push("-i", this.options.inputfile.replace(/ /g, " ").replace(/'/g, "'").replace(/"/g, '"'));
                    } else {
                        _$jscoverage_done("lib/processor.js", 729);
                        this.options.logger.error("input file is not readable");
                        _$jscoverage_done("lib/processor.js", 730);
                        throw new Error("input file is not readable");
                    }
                }
            }
        } else {
            _$jscoverage_done("lib/processor.js", 734);
            if (_$jscoverage_done("lib/processor.js", 734, this.options.inputstream)) {
                _$jscoverage_done("lib/processor.js", 736);
                args.push("-i", "-");
            } else {
                _$jscoverage_done("lib/processor.js", 737);
                if (_$jscoverage_done("lib/processor.js", 737, this.options.inputlive)) {
                    _$jscoverage_done("lib/processor.js", 739);
                    if (_$jscoverage_done("lib/processor.js", 739, /^[a-z]+:\/\//.test(this.options.inputfile))) {
                        _$jscoverage_done("lib/processor.js", 741);
                        args.push("-i", this.options.inputfile.replace(" ", "%20") + " live=1");
                    } else {
                        _$jscoverage_done("lib/processor.js", 743);
                        this.options.logger.error("live input URI is not valid");
                        _$jscoverage_done("lib/processor.js", 744);
                        throw new Error("live input URI is not valid");
                    }
                }
            }
        }
        _$jscoverage_done("lib/processor.js", 748);
        if (_$jscoverage_done("lib/processor.js", 748, this.options.otherInputs)) {
            _$jscoverage_done("lib/processor.js", 749);
            if (_$jscoverage_done("lib/processor.js", 749, this.options.otherInputs.length > 0)) {
                _$jscoverage_done("lib/processor.js", 750);
                this.options.otherInputs.forEach(function(el) {
                    _$jscoverage_done("lib/processor.js", 751);
                    args.push("-i", el);
                });
            }
        }
        _$jscoverage_done("lib/processor.js", 756);
        if (_$jscoverage_done("lib/processor.js", 756, this.options.strictExperimental)) {
            _$jscoverage_done("lib/processor.js", 757);
            args.push("-strict", "experimental");
        }
        _$jscoverage_done("lib/processor.js", 760);
        if (_$jscoverage_done("lib/processor.js", 760, this.options.duration)) {
            _$jscoverage_done("lib/processor.js", 761);
            args.push("-t", this.options.duration);
        }
        _$jscoverage_done("lib/processor.js", 764);
        if (_$jscoverage_done("lib/processor.js", 764, this.options.video.framecount)) {
            _$jscoverage_done("lib/processor.js", 765);
            args.push("-vframes", this.options.video.framecount);
        }
        _$jscoverage_done("lib/processor.js", 769);
        if (_$jscoverage_done("lib/processor.js", 769, this.options.format)) {
            _$jscoverage_done("lib/processor.js", 770);
            args.push("-f", this.options.format);
        }
        _$jscoverage_done("lib/processor.js", 774);
        if (_$jscoverage_done("lib/processor.js", 774, this.options.video.skip)) {
            _$jscoverage_done("lib/processor.js", 776);
            args.push("-vn");
        } else {
            _$jscoverage_done("lib/processor.js", 778);
            if (_$jscoverage_done("lib/processor.js", 778, this.options.video.bitrate)) {
                _$jscoverage_done("lib/processor.js", 779);
                args.push("-b:v", this.options.video.bitrate + "k");
                _$jscoverage_done("lib/processor.js", 780);
                if (_$jscoverage_done("lib/processor.js", 780, this.options._useConstantVideoBitrate)) {
                    _$jscoverage_done("lib/processor.js", 782);
                    args.push("-maxrate", this.options.video.bitrate + "k");
                    _$jscoverage_done("lib/processor.js", 783);
                    args.push("-minrate", this.options.video.bitrate + "k");
                    _$jscoverage_done("lib/processor.js", 784);
                    args.push("-bufsize", "3M");
                }
            }
            _$jscoverage_done("lib/processor.js", 787);
            if (_$jscoverage_done("lib/processor.js", 787, this.options.video.codec)) {
                _$jscoverage_done("lib/processor.js", 788);
                args.push("-vcodec", this.options.video.codec);
            }
            _$jscoverage_done("lib/processor.js", 790);
            if (_$jscoverage_done("lib/processor.js", 790, this.options.video.fps)) {
                _$jscoverage_done("lib/processor.js", 791);
                args.push("-r", this.options.video.fps);
            }
            _$jscoverage_done("lib/processor.js", 793);
            if (_$jscoverage_done("lib/processor.js", 793, this.options.video.aspect)) {
                _$jscoverage_done("lib/processor.js", 794);
                args.push("-aspect", this.options.video.aspect);
            }
        }
        _$jscoverage_done("lib/processor.js", 799);
        if (_$jscoverage_done("lib/processor.js", 799, this.options.audio.skip)) {
            _$jscoverage_done("lib/processor.js", 801);
            args.push("-an");
        } else {
            _$jscoverage_done("lib/processor.js", 803);
            if (_$jscoverage_done("lib/processor.js", 803, this.options.audio.bitrate)) {
                _$jscoverage_done("lib/processor.js", 804);
                args.push("-b:a", this.options.audio.bitrate + "k");
            }
            _$jscoverage_done("lib/processor.js", 806);
            if (_$jscoverage_done("lib/processor.js", 806, this.options.audio.channels)) {
                _$jscoverage_done("lib/processor.js", 807);
                args.push("-ac", this.options.audio.channels);
            }
            _$jscoverage_done("lib/processor.js", 809);
            if (_$jscoverage_done("lib/processor.js", 809, this.options.audio.codec)) {
                _$jscoverage_done("lib/processor.js", 810);
                args.push("-acodec", this.options.audio.codec);
            }
            _$jscoverage_done("lib/processor.js", 812);
            if (_$jscoverage_done("lib/processor.js", 812, this.options.audio.frequency)) {
                _$jscoverage_done("lib/processor.js", 813);
                args.push("-ar", this.options.audio.frequency);
            }
            _$jscoverage_done("lib/processor.js", 815);
            if (_$jscoverage_done("lib/processor.js", 815, this.options.audio.quality) || _$jscoverage_done("lib/processor.js", 815, this.options.audio.quality === 0)) {
                _$jscoverage_done("lib/processor.js", 816);
                args.push("-aq", this.options.audio.quality);
            }
        }
        _$jscoverage_done("lib/processor.js", 821);
        if (_$jscoverage_done("lib/processor.js", 821, this.options.additional)) {
            _$jscoverage_done("lib/processor.js", 822);
            if (_$jscoverage_done("lib/processor.js", 822, this.options.additional.length > 0)) {
                _$jscoverage_done("lib/processor.js", 823);
                this.options.additional.forEach(function(el) {
                    _$jscoverage_done("lib/processor.js", 824);
                    args.push(el);
                });
            }
        }
        _$jscoverage_done("lib/processor.js", 829);
        if (_$jscoverage_done("lib/processor.js", 829, this.options.video.pad) && _$jscoverage_done("lib/processor.js", 829, !this.options.video.skip)) {
            _$jscoverage_done("lib/processor.js", 831);
            if (_$jscoverage_done("lib/processor.js", 831, this.atLeastVersion(this.metaData.ffmpegversion, "0.7"))) {
                _$jscoverage_done("lib/processor.js", 833);
                args.push("-vf");
                _$jscoverage_done("lib/processor.js", 834);
                args.push("pad=" + this.options.video.pad.w + ":" + this.options.video.pad.h + ":" + this.options.video.pad.x + ":" + this.options.video.pad.y + ":" + this.options.video.padcolor);
            } else {
                _$jscoverage_done("lib/processor.js", 840);
                return new Error("Your ffmpeg version " + this.metaData.ffmpegversion + " does not support padding");
            }
        }
        _$jscoverage_done("lib/processor.js", 845);
        if (_$jscoverage_done("lib/processor.js", 845, this.options.video.size) && _$jscoverage_done("lib/processor.js", 845, !this.options.video.skip)) {
            _$jscoverage_done("lib/processor.js", 846);
            args.push("-s", this.options.video.size);
        }
        _$jscoverage_done("lib/processor.js", 850);
        if (_$jscoverage_done("lib/processor.js", 850, this.options.video.fpsOutput)) {
            _$jscoverage_done("lib/processor.js", 851);
            args.push("-r", this.options.video.fpsOutput);
        }
        _$jscoverage_done("lib/processor.js", 854);
        if (_$jscoverage_done("lib/processor.js", 854, this.options.outputfile)) {
            _$jscoverage_done("lib/processor.js", 855);
            var target = this.escapedPath(this.options.outputfile, false);
            _$jscoverage_done("lib/processor.js", 856);
            if (_$jscoverage_done("lib/processor.js", 856, !os.match(/win(32|64)/))) {
                _$jscoverage_done("lib/processor.js", 857);
                args.push("-y", target.replace(" ", "\\ "));
            } else {
                _$jscoverage_done("lib/processor.js", 859);
                args.push("-y", target);
            }
        } else {
            _$jscoverage_done("lib/processor.js", 862);
            if (_$jscoverage_done("lib/processor.js", 862, !overrideOutputCheck)) {
                _$jscoverage_done("lib/processor.js", 863);
                this.options.logger.error("no outputfile specified");
            }
        }
        _$jscoverage_done("lib/processor.js", 866);
        return args;
    };
};