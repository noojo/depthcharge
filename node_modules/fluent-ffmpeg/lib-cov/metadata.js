// instrument by jscoverage, do not modifly this file
(function () {
  var BASE;
  if (typeof global === 'object') {
    BASE = global;
  } else if (typeof window === 'object') {
    BASE = window;
  } else {
    throw new Error('[jscoverage] unknow ENV!');
  }
  if (!BASE._$jscoverage) {
    BASE._$jscoverage = {};
    BASE._$jscoverage_cond = {};
    BASE._$jscoverage_done = function (file, line, express) {
      if (arguments.length === 2) {
        BASE._$jscoverage[file][line] ++;
      } else {
        BASE._$jscoverage_cond[file][line] ++;
        return express;
      }
    };
    BASE._$jscoverage_init = function (base, file, lines) {
      var tmp = [];
      for (var i = 0; i < lines.length; i ++) {
        tmp[lines[i]] = 0;
      }
      base[file] = tmp;
    };
  }
})();
_$jscoverage_init(_$jscoverage, "lib/metadata.js",[1,5,7,8,9,11,13,14,15,16,17,18,20,21,24,27,28,29,33,35,36,38,39,40,43,46,47,48,52,53,54,57,83,84,89,94,127,128,132,133,134,135,137,138,139,140,142,147,148,149,150,152,153,154,155,157,162,163,164,165,167,168,172,174,178,180,182,185,187,190,192,194,195,197,199,200]);
_$jscoverage_init(_$jscoverage_cond, "lib/metadata.js",[8,11,17,17,17,20,20,20,39,47,83,127,132,137,147,152,162,162,163,180,180,185,190,194]);
_$jscoverage["lib/metadata.js"].source = ["var exec = require('exec-queue'),","  path = require('path'),","  os = require('os').platform();","","exports = module.exports = function Metadata(command) {","  ","  command.prototype.escapedPath = function(path, enclose)  {","    if(/http/.exec(path)) {","      path = path.replace(' ', '%20');","    } else {","      if (os.match(/win(32|64)/)) {","        // on windows, we have to fix up the filename","        var parts = path.split(/\\\\/gi);","        var fName = parts[parts.length - 1];","        parts[parts.length - 1] = fName.replace(/[\\s\\\\:\"'*?<>|\\/]+/mig, '-');","        path = parts.join('\\\\');","        if (enclose && path[0] != '\"' && path[path.length-1] != '\"')","          path = '\"' + path + '\"'","      } else {","        if (enclose && path[0] != '\"' && path[path.length-1] != '\"')","          path = '\"' + path + '\"';","      }","    }","    return path;","  };","  // for internal use","  command.prototype.getMetadata = function(inputfile, callback) {","    this.inputfile = path.normalize(inputfile);","    this._loadDataInternal(callback);","  };","","  // for external use","  command.prototype.get = function(callback) {","    // import extensions for external call","    this.inputfile = path.normalize(inputfile);","    this._loadDataInternal(callback);","  };","  command.prototype.meta = function() {","    if (this.metaData){","      return this.metaData;","    }","    else{","      return {};","    }","  }","  command.prototype._loadDataInternal = function(callback) {","    if (this.metaData){","      return callback(this.metaData);","    }","    ","","    var inputfile = this.escapedPath(this.inputfile, true);","    var self = this;","    exec(this.ffmpegPath + ' -i ' + inputfile, function(err, stdout, stderr) {","      // parse data from stderr","","      var none          = []","        , aspect        = /DAR ([0-9\\:]+)/.exec(stderr) || none","        , pixel        = /[SP]AR ([0-9\\:]+)/.exec(stderr) || none","        , video_bitrate = /bitrate: ([0-9]+) kb\\/s/.exec(stderr) || none","        , fps           = /(INAM|fps)\\s+:\\s(.+)/i.exec(stderr) || none","        , container     = /Input #0, ([a-zA-Z0-9]+),/.exec(stderr) || none","        , title         = /(INAM|title)\\s+:\\s(.+)/i.exec(stderr) || none","        , artist        = /artist\\s+:\\s(.+)/i.exec(stderr) || none","        , album         = /album\\s+:\\s(.+)/i.exec(stderr) || none","        , track         = /track\\s+:\\s(.+)/i.exec(stderr) || none","        , date          = /date\\s+:\\s(.+)/i.exec(stderr) || none","        , video_stream  = /Stream #([0-9\\.]+)([a-z0-9\\(\\)\\[\\]]*)[:] Video/.exec(stderr) || none","        , video_codec   = /Video: ([\\w]+)/.exec(stderr) || none","        , duration      = /Duration: (([0-9]+):([0-9]{2}):([0-9]{2}).([0-9]+))/.exec(stderr) || none","        , resolution    = /(([0-9]{2,5})x([0-9]{2,5}))/.exec(stderr) || none","        , audio_bitrate = /Audio:(.)*, ([0-9]+) kb\\/s/.exec(stderr) || none","        , sample_rate   = /([0-9]+) Hz/i.exec(stderr) || none","        , audio_codec   = /Audio: ([\\w]+)/.exec(stderr) || none","        , channels      = /Audio: [\\w]+, [0-9]+ Hz, ([a-z0-9:]+)[a-z0-9\\/,]*/.exec(stderr) || none","        , audio_stream  = /Stream #([0-9\\.]+)([a-z0-9\\(\\)\\[\\]]*)[:] Audio/.exec(stderr) || none","        , is_synched    = (/start: 0.000000/.exec(stderr) !== null)","        , rotate        = /rotate[\\s]+:[\\s]([\\d]{2,3})/.exec(stderr) || none","        , getVersion    = /ffmpeg version (?:(\\d+)\\.)?(?:(\\d+)\\.)?(\\*|\\d+)/i.exec(stderr)","        , major_brand   = /major_brand\\s+:\\s([^\\s]+)/.exec(stderr) || none","        , ffmpegVersion = 0;","","      if (getVersion) {","        ffmpegVersion = [","          getVersion[1]>=0 ? getVersion[1] : null,","          getVersion[2]>=0 ? getVersion[2] : null,","          getVersion[3]>=0 ? getVersion[3] : null","          ].filter(function(val) {","            return val !== null;","          }).join('.');","      }","","      // build return object","      var _ref","        , ret = {","        ffmpegversion: ffmpegVersion","        , title: title[2] || ''","        , artist: artist[1] || ''","        , album: album[1] || ''","        , track: track[1] || ''","        , date: date[1] || ''","        , durationraw: duration[1] || ''","        , durationsec: duration[1] ? self.ffmpegTimemarkToSeconds(duration[1]) : 0","        , synched: is_synched","        , major_brand: major_brand[1]","        , video: {","          container: container[1] || ''","          , bitrate: (video_bitrate.length > 1) ? parseInt(video_bitrate[1], 10) : 0","          , codec: video_codec[1] || ''","          , resolution: {","            w: resolution.length > 2 ? parseInt(resolution[2], 10) : 0","            , h: resolution.length > 3 ? parseInt(resolution[3], 10) : 0","          }","          , resolutionSquare: {}","          , rotate: rotate.length > 1 ? parseInt(rotate[1], 10) : 0","          , fps: fps.length > 1 ? parseFloat(fps[2]) : 0.0","          , stream: video_stream.length > 1 ? parseFloat(video_stream[1]) : 0.0","        }","        , audio: {","          codec: audio_codec[1] || ''","          , bitrate: parseInt((_ref = audio_bitrate[audio_bitrate.length - 1]) != null ? _ref : 0, 10)","          , sample_rate: sample_rate.length > 1 ? parseInt(sample_rate[1], 10) : 0","          , stream: audio_stream.length > 1 ? parseFloat(audio_stream[1]) : 0.0","        }","      };","","      if (channels.length > 0) {","        ret.audio.channels = {stereo:2, mono:1}[channels[1]] || 0;","      }","","      // save aspect ratio for auto-padding","      if (aspect.length > 0) {","        ret.video.aspectString = aspect[1];","        var n = aspect[1].split(\":\");","        ret.video.aspect = parseFloat((parseInt(n[0], 10) / parseInt(n[1], 10)));","      } else {","        if(ret.video.resolution.w !== 0) {","          var f = self.gcd(ret.video.resolution.w, ret.video.resolution.h);","          ret.video.aspectString = ret.video.resolution.w/f + ':' + ret.video.resolution.h/f;","          ret.video.aspect = parseFloat((ret.video.resolution.w / ret.video.resolution.h));","        } else {","          ret.video.aspect = 0.0;","        }","      }","","      // save pixel ratio for output size calculation","      if (pixel.length > 0) {","        ret.video.pixelString = pixel[1];","        var n = pixel[1].split(\":\");","        ret.video.pixel = parseFloat((parseInt(n[0], 10) / parseInt(n[1], 10)));","      } else {","        if (ret.video.resolution.w !== 0) {","          var f = self.gcd(ret.video.resolution.w, ret.video.resolution.h);","          ret.video.pixelString = '1:1';","          ret.video.pixel = 1;","        } else {","          ret.video.pixel = 0.0;","        }","      }","","      // correct video.resolution when pixel aspectratio is not 1","      if (ret.video.pixel !== 1 || ret.video.pixel !== 0) {","        if( ret.video.pixel > 1 ) {","          ret.video.resolutionSquare.w = parseInt(ret.video.resolution.w * ret.video.pixel, 10);","          ret.video.resolutionSquare.h = ret.video.resolution.h;","        } else {","          ret.video.resolutionSquare.w = ret.video.resolution.w;","          ret.video.resolutionSquare.h = parseInt(ret.video.resolution.h / ret.video.pixel, 10);","        }","      }","","      self.metaData = ret;","","      callback(ret);","    });","  };","  ","  command.prototype.requiresMetaData = function() {","    ","    if (this.options.video.pad && !this.options.video.skip)","    {","      return true;","    }","","    if (this.options.onProgress)","    {","      return true;","    }","","    if (this.options.requireMetaData)","    {","      return true;","    }","    if(this.options.video.loop){","      return true;","    }","    return false;","  };","  return  function(filename,callback){","      var cmd = new command({}).getMetadata(filename, callback);","    }","  ","};","",""];
_$jscoverage_done("lib/metadata.js", 1);
var exec = require("exec-queue"), path = require("path"), os = require("os").platform();

_$jscoverage_done("lib/metadata.js", 5);
exports = module.exports = function Metadata(command) {
    _$jscoverage_done("lib/metadata.js", 7);
    command.prototype.escapedPath = function(path, enclose) {
        _$jscoverage_done("lib/metadata.js", 8);
        if (_$jscoverage_done("lib/metadata.js", 8, /http/.exec(path))) {
            _$jscoverage_done("lib/metadata.js", 9);
            path = path.replace(" ", "%20");
        } else {
            _$jscoverage_done("lib/metadata.js", 11);
            if (_$jscoverage_done("lib/metadata.js", 11, os.match(/win(32|64)/))) {
                _$jscoverage_done("lib/metadata.js", 13);
                var parts = path.split(/\\/gi);
                _$jscoverage_done("lib/metadata.js", 14);
                var fName = parts[parts.length - 1];
                _$jscoverage_done("lib/metadata.js", 15);
                parts[parts.length - 1] = fName.replace(/[\s\\:"'*?<>|\/]+/mig, "-");
                _$jscoverage_done("lib/metadata.js", 16);
                path = parts.join("\\");
                _$jscoverage_done("lib/metadata.js", 17);
                if (_$jscoverage_done("lib/metadata.js", 17, enclose) && _$jscoverage_done("lib/metadata.js", 17, path[0] != '"') && _$jscoverage_done("lib/metadata.js", 17, path[path.length - 1] != '"')) {
                    _$jscoverage_done("lib/metadata.js", 18);
                    path = '"' + path + '"';
                }
            } else {
                _$jscoverage_done("lib/metadata.js", 20);
                if (_$jscoverage_done("lib/metadata.js", 20, enclose) && _$jscoverage_done("lib/metadata.js", 20, path[0] != '"') && _$jscoverage_done("lib/metadata.js", 20, path[path.length - 1] != '"')) {
                    _$jscoverage_done("lib/metadata.js", 21);
                    path = '"' + path + '"';
                }
            }
        }
        _$jscoverage_done("lib/metadata.js", 24);
        return path;
    };
    _$jscoverage_done("lib/metadata.js", 27);
    command.prototype.getMetadata = function(inputfile, callback) {
        _$jscoverage_done("lib/metadata.js", 28);
        this.inputfile = path.normalize(inputfile);
        _$jscoverage_done("lib/metadata.js", 29);
        this._loadDataInternal(callback);
    };
    _$jscoverage_done("lib/metadata.js", 33);
    command.prototype.get = function(callback) {
        _$jscoverage_done("lib/metadata.js", 35);
        this.inputfile = path.normalize(inputfile);
        _$jscoverage_done("lib/metadata.js", 36);
        this._loadDataInternal(callback);
    };
    _$jscoverage_done("lib/metadata.js", 38);
    command.prototype.meta = function() {
        _$jscoverage_done("lib/metadata.js", 39);
        if (_$jscoverage_done("lib/metadata.js", 39, this.metaData)) {
            _$jscoverage_done("lib/metadata.js", 40);
            return this.metaData;
        } else {
            _$jscoverage_done("lib/metadata.js", 43);
            return {};
        }
    };
    _$jscoverage_done("lib/metadata.js", 46);
    command.prototype._loadDataInternal = function(callback) {
        _$jscoverage_done("lib/metadata.js", 47);
        if (_$jscoverage_done("lib/metadata.js", 47, this.metaData)) {
            _$jscoverage_done("lib/metadata.js", 48);
            return callback(this.metaData);
        }
        _$jscoverage_done("lib/metadata.js", 52);
        var inputfile = this.escapedPath(this.inputfile, true);
        _$jscoverage_done("lib/metadata.js", 53);
        var self = this;
        _$jscoverage_done("lib/metadata.js", 54);
        exec(this.ffmpegPath + " -i " + inputfile, function(err, stdout, stderr) {
            _$jscoverage_done("lib/metadata.js", 57);
            var none = [], aspect = /DAR ([0-9\:]+)/.exec(stderr) || none, pixel = /[SP]AR ([0-9\:]+)/.exec(stderr) || none, video_bitrate = /bitrate: ([0-9]+) kb\/s/.exec(stderr) || none, fps = /(INAM|fps)\s+:\s(.+)/i.exec(stderr) || none, container = /Input #0, ([a-zA-Z0-9]+),/.exec(stderr) || none, title = /(INAM|title)\s+:\s(.+)/i.exec(stderr) || none, artist = /artist\s+:\s(.+)/i.exec(stderr) || none, album = /album\s+:\s(.+)/i.exec(stderr) || none, track = /track\s+:\s(.+)/i.exec(stderr) || none, date = /date\s+:\s(.+)/i.exec(stderr) || none, video_stream = /Stream #([0-9\.]+)([a-z0-9\(\)\[\]]*)[:] Video/.exec(stderr) || none, video_codec = /Video: ([\w]+)/.exec(stderr) || none, duration = /Duration: (([0-9]+):([0-9]{2}):([0-9]{2}).([0-9]+))/.exec(stderr) || none, resolution = /(([0-9]{2,5})x([0-9]{2,5}))/.exec(stderr) || none, audio_bitrate = /Audio:(.)*, ([0-9]+) kb\/s/.exec(stderr) || none, sample_rate = /([0-9]+) Hz/i.exec(stderr) || none, audio_codec = /Audio: ([\w]+)/.exec(stderr) || none, channels = /Audio: [\w]+, [0-9]+ Hz, ([a-z0-9:]+)[a-z0-9\/,]*/.exec(stderr) || none, audio_stream = /Stream #([0-9\.]+)([a-z0-9\(\)\[\]]*)[:] Audio/.exec(stderr) || none, is_synched = /start: 0.000000/.exec(stderr) !== null, rotate = /rotate[\s]+:[\s]([\d]{2,3})/.exec(stderr) || none, getVersion = /ffmpeg version (?:(\d+)\.)?(?:(\d+)\.)?(\*|\d+)/i.exec(stderr), major_brand = /major_brand\s+:\s([^\s]+)/.exec(stderr) || none, ffmpegVersion = 0;
            _$jscoverage_done("lib/metadata.js", 83);
            if (_$jscoverage_done("lib/metadata.js", 83, getVersion)) {
                _$jscoverage_done("lib/metadata.js", 84);
                ffmpegVersion = [ getVersion[1] >= 0 ? getVersion[1] : null, getVersion[2] >= 0 ? getVersion[2] : null, getVersion[3] >= 0 ? getVersion[3] : null ].filter(function(val) {
                    _$jscoverage_done("lib/metadata.js", 89);
                    return val !== null;
                }).join(".");
            }
            _$jscoverage_done("lib/metadata.js", 94);
            var _ref, ret = {
                ffmpegversion: ffmpegVersion,
                title: title[2] || "",
                artist: artist[1] || "",
                album: album[1] || "",
                track: track[1] || "",
                date: date[1] || "",
                durationraw: duration[1] || "",
                durationsec: duration[1] ? self.ffmpegTimemarkToSeconds(duration[1]) : 0,
                synched: is_synched,
                major_brand: major_brand[1],
                video: {
                    container: container[1] || "",
                    bitrate: video_bitrate.length > 1 ? parseInt(video_bitrate[1], 10) : 0,
                    codec: video_codec[1] || "",
                    resolution: {
                        w: resolution.length > 2 ? parseInt(resolution[2], 10) : 0,
                        h: resolution.length > 3 ? parseInt(resolution[3], 10) : 0
                    },
                    resolutionSquare: {},
                    rotate: rotate.length > 1 ? parseInt(rotate[1], 10) : 0,
                    fps: fps.length > 1 ? parseFloat(fps[2]) : 0,
                    stream: video_stream.length > 1 ? parseFloat(video_stream[1]) : 0
                },
                audio: {
                    codec: audio_codec[1] || "",
                    bitrate: parseInt((_ref = audio_bitrate[audio_bitrate.length - 1]) != null ? _ref : 0, 10),
                    sample_rate: sample_rate.length > 1 ? parseInt(sample_rate[1], 10) : 0,
                    stream: audio_stream.length > 1 ? parseFloat(audio_stream[1]) : 0
                }
            };
            _$jscoverage_done("lib/metadata.js", 127);
            if (_$jscoverage_done("lib/metadata.js", 127, channels.length > 0)) {
                _$jscoverage_done("lib/metadata.js", 128);
                ret.audio.channels = {
                    stereo: 2,
                    mono: 1
                }[channels[1]] || 0;
            }
            _$jscoverage_done("lib/metadata.js", 132);
            if (_$jscoverage_done("lib/metadata.js", 132, aspect.length > 0)) {
                _$jscoverage_done("lib/metadata.js", 133);
                ret.video.aspectString = aspect[1];
                _$jscoverage_done("lib/metadata.js", 134);
                var n = aspect[1].split(":");
                _$jscoverage_done("lib/metadata.js", 135);
                ret.video.aspect = parseFloat(parseInt(n[0], 10) / parseInt(n[1], 10));
            } else {
                _$jscoverage_done("lib/metadata.js", 137);
                if (_$jscoverage_done("lib/metadata.js", 137, ret.video.resolution.w !== 0)) {
                    _$jscoverage_done("lib/metadata.js", 138);
                    var f = self.gcd(ret.video.resolution.w, ret.video.resolution.h);
                    _$jscoverage_done("lib/metadata.js", 139);
                    ret.video.aspectString = ret.video.resolution.w / f + ":" + ret.video.resolution.h / f;
                    _$jscoverage_done("lib/metadata.js", 140);
                    ret.video.aspect = parseFloat(ret.video.resolution.w / ret.video.resolution.h);
                } else {
                    _$jscoverage_done("lib/metadata.js", 142);
                    ret.video.aspect = 0;
                }
            }
            _$jscoverage_done("lib/metadata.js", 147);
            if (_$jscoverage_done("lib/metadata.js", 147, pixel.length > 0)) {
                _$jscoverage_done("lib/metadata.js", 148);
                ret.video.pixelString = pixel[1];
                _$jscoverage_done("lib/metadata.js", 149);
                var n = pixel[1].split(":");
                _$jscoverage_done("lib/metadata.js", 150);
                ret.video.pixel = parseFloat(parseInt(n[0], 10) / parseInt(n[1], 10));
            } else {
                _$jscoverage_done("lib/metadata.js", 152);
                if (_$jscoverage_done("lib/metadata.js", 152, ret.video.resolution.w !== 0)) {
                    _$jscoverage_done("lib/metadata.js", 153);
                    var f = self.gcd(ret.video.resolution.w, ret.video.resolution.h);
                    _$jscoverage_done("lib/metadata.js", 154);
                    ret.video.pixelString = "1:1";
                    _$jscoverage_done("lib/metadata.js", 155);
                    ret.video.pixel = 1;
                } else {
                    _$jscoverage_done("lib/metadata.js", 157);
                    ret.video.pixel = 0;
                }
            }
            _$jscoverage_done("lib/metadata.js", 162);
            if (_$jscoverage_done("lib/metadata.js", 162, ret.video.pixel !== 1) || _$jscoverage_done("lib/metadata.js", 162, ret.video.pixel !== 0)) {
                _$jscoverage_done("lib/metadata.js", 163);
                if (_$jscoverage_done("lib/metadata.js", 163, ret.video.pixel > 1)) {
                    _$jscoverage_done("lib/metadata.js", 164);
                    ret.video.resolutionSquare.w = parseInt(ret.video.resolution.w * ret.video.pixel, 10);
                    _$jscoverage_done("lib/metadata.js", 165);
                    ret.video.resolutionSquare.h = ret.video.resolution.h;
                } else {
                    _$jscoverage_done("lib/metadata.js", 167);
                    ret.video.resolutionSquare.w = ret.video.resolution.w;
                    _$jscoverage_done("lib/metadata.js", 168);
                    ret.video.resolutionSquare.h = parseInt(ret.video.resolution.h / ret.video.pixel, 10);
                }
            }
            _$jscoverage_done("lib/metadata.js", 172);
            self.metaData = ret;
            _$jscoverage_done("lib/metadata.js", 174);
            callback(ret);
        });
    };
    _$jscoverage_done("lib/metadata.js", 178);
    command.prototype.requiresMetaData = function() {
        _$jscoverage_done("lib/metadata.js", 180);
        if (_$jscoverage_done("lib/metadata.js", 180, this.options.video.pad) && _$jscoverage_done("lib/metadata.js", 180, !this.options.video.skip)) {
            _$jscoverage_done("lib/metadata.js", 182);
            return true;
        }
        _$jscoverage_done("lib/metadata.js", 185);
        if (_$jscoverage_done("lib/metadata.js", 185, this.options.onProgress)) {
            _$jscoverage_done("lib/metadata.js", 187);
            return true;
        }
        _$jscoverage_done("lib/metadata.js", 190);
        if (_$jscoverage_done("lib/metadata.js", 190, this.options.requireMetaData)) {
            _$jscoverage_done("lib/metadata.js", 192);
            return true;
        }
        _$jscoverage_done("lib/metadata.js", 194);
        if (_$jscoverage_done("lib/metadata.js", 194, this.options.video.loop)) {
            _$jscoverage_done("lib/metadata.js", 195);
            return true;
        }
        _$jscoverage_done("lib/metadata.js", 197);
        return false;
    };
    _$jscoverage_done("lib/metadata.js", 199);
    return function(filename, callback) {
        _$jscoverage_done("lib/metadata.js", 200);
        var cmd = (new command({})).getMetadata(filename, callback);
    };
};