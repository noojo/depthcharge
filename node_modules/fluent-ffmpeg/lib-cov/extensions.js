// instrument by jscoverage, do not modifly this file
(function () {
  var BASE;
  if (typeof global === 'object') {
    BASE = global;
  } else if (typeof window === 'object') {
    BASE = window;
  } else {
    throw new Error('[jscoverage] unknow ENV!');
  }
  if (!BASE._$jscoverage) {
    BASE._$jscoverage = {};
    BASE._$jscoverage_cond = {};
    BASE._$jscoverage_done = function (file, line, express) {
      if (arguments.length === 2) {
        BASE._$jscoverage[file][line] ++;
      } else {
        BASE._$jscoverage_cond[file][line] ++;
        return express;
      }
    };
    BASE._$jscoverage_init = function (base, file, lines) {
      var tmp = [];
      for (var i = 0; i < lines.length; i ++) {
        tmp[lines[i]] = 0;
      }
      base[file] = tmp;
    };
  }
})();
_$jscoverage_init(_$jscoverage, "lib/extensions.js",[2,4,6,7,10,11,12,14,17,18,19,21,22,23,24,26,29,30,31,32,34,41,44,45,47,48,51,53,56,59,61,64,65,66,68,70,71,72,73,80,81,82,86,87,89,90,92,93,95,96,98]);
_$jscoverage_init(_$jscoverage_cond, "lib/extensions.js",[11,18,18,31,44,44,65,65,86,89,92,95]);
_$jscoverage["lib/extensions.js"].source = ["","exports = module.exports = function Extensions(command) {","","  command.prototype.ffmpegPath = process.env.FFMPEG_PATH || 'ffmpeg';","","  command.prototype.setFfmpegPath = function(path) {","    this.ffmpegPath = path;","  };","","  command.prototype.determineFfmpegPath = function() {","    if (this.ffmpegPath) {","      return this.ffmpegPath;","    }","    return 'ffmpeg';","  };","","  command.prototype.gcd = function(a, b) {","    if (!a && !b) {","      return 0;","    }","    while (a !== 0) {","      var z = b % a;","      b = a;","      a = z;","    }","    return b;","  };","","  command.prototype.toAspectRatio = function(ar) {","    var p = ar.split(':');","    if (p.length !== 2) {","      return undefined;","    } else {","      return {","        x: parseInt(p[0], 10),","        y: parseInt(p[1], 10)","      };","    }","  };","","  command.prototype.ffmpegTimemarkToSeconds = function(timemark) {","","    // In case ffmpeg outputs the timemark as float","    if(timemark.indexOf(':') === -1 && timemark.indexOf('.') >= 0)","      return parseInt(timemark)","","    var parts = timemark.split(':');","    var secs = 0;","","    // add hours","    secs += parseInt(parts[0], 10) * 3600;","    // add minutes","    secs += parseInt(parts[1], 10) * 60;","","    // split sec/msec part","    var secParts = parts[2].split('.');","","    // add seconds","    secs += parseInt(secParts[0], 10);","","    return secs;","  };","","  command.prototype.parseVersionString = function(versionstr) {","    if (typeof versionstr != 'string' || versionstr.indexOf('.') == -1) {","      return false;","    }","    var x = versionstr.split('.');","    // parse from string or default to 0 if can't parse","    var maj = parseInt(x[0], 10) || 0;","    var min = parseInt(x[1], 10) || 0;","    var pat = parseInt(x[2], 10) || 0;","    return {","      major: maj,","      minor: min,","      patch: pat","    };","  };","","  command.prototype.atLeastVersion = function(actualVersion, minVersion) {","    var minimum = this.parseVersionString(minVersion);","    var running = this.parseVersionString(actualVersion);","","    // if we can't even parse the version string (affects git builds for windows),","    // we simply return true and assume a current build","    if (!running)","      return true;","","    if (running.major !== minimum.major) {","      return (running.major > minimum.major);","    } else {","      if (running.minor !== minimum.minor) {","        return (running.minor > minimum.minor);","      } else {","        if (running.patch !== minimum.patch) {","          return (running.patch > minimum.patch);","        } else {","          return true;","        }","      }","    }","  };","};",""];
_$jscoverage_done("lib/extensions.js", 2);
exports = module.exports = function Extensions(command) {
    _$jscoverage_done("lib/extensions.js", 4);
    command.prototype.ffmpegPath = process.env.FFMPEG_PATH || "ffmpeg";
    _$jscoverage_done("lib/extensions.js", 6);
    command.prototype.setFfmpegPath = function(path) {
        _$jscoverage_done("lib/extensions.js", 7);
        this.ffmpegPath = path;
    };
    _$jscoverage_done("lib/extensions.js", 10);
    command.prototype.determineFfmpegPath = function() {
        _$jscoverage_done("lib/extensions.js", 11);
        if (_$jscoverage_done("lib/extensions.js", 11, this.ffmpegPath)) {
            _$jscoverage_done("lib/extensions.js", 12);
            return this.ffmpegPath;
        }
        _$jscoverage_done("lib/extensions.js", 14);
        return "ffmpeg";
    };
    _$jscoverage_done("lib/extensions.js", 17);
    command.prototype.gcd = function(a, b) {
        _$jscoverage_done("lib/extensions.js", 18);
        if (_$jscoverage_done("lib/extensions.js", 18, !a) && _$jscoverage_done("lib/extensions.js", 18, !b)) {
            _$jscoverage_done("lib/extensions.js", 19);
            return 0;
        }
        _$jscoverage_done("lib/extensions.js", 21);
        while (a !== 0) {
            _$jscoverage_done("lib/extensions.js", 22);
            var z = b % a;
            _$jscoverage_done("lib/extensions.js", 23);
            b = a;
            _$jscoverage_done("lib/extensions.js", 24);
            a = z;
        }
        _$jscoverage_done("lib/extensions.js", 26);
        return b;
    };
    _$jscoverage_done("lib/extensions.js", 29);
    command.prototype.toAspectRatio = function(ar) {
        _$jscoverage_done("lib/extensions.js", 30);
        var p = ar.split(":");
        _$jscoverage_done("lib/extensions.js", 31);
        if (_$jscoverage_done("lib/extensions.js", 31, p.length !== 2)) {
            _$jscoverage_done("lib/extensions.js", 32);
            return undefined;
        } else {
            _$jscoverage_done("lib/extensions.js", 34);
            return {
                x: parseInt(p[0], 10),
                y: parseInt(p[1], 10)
            };
        }
    };
    _$jscoverage_done("lib/extensions.js", 41);
    command.prototype.ffmpegTimemarkToSeconds = function(timemark) {
        _$jscoverage_done("lib/extensions.js", 44);
        if (_$jscoverage_done("lib/extensions.js", 44, timemark.indexOf(":") === -1) && _$jscoverage_done("lib/extensions.js", 44, timemark.indexOf(".") >= 0)) {
            _$jscoverage_done("lib/extensions.js", 45);
            return parseInt(timemark);
        }
        _$jscoverage_done("lib/extensions.js", 47);
        var parts = timemark.split(":");
        _$jscoverage_done("lib/extensions.js", 48);
        var secs = 0;
        _$jscoverage_done("lib/extensions.js", 51);
        secs += parseInt(parts[0], 10) * 3600;
        _$jscoverage_done("lib/extensions.js", 53);
        secs += parseInt(parts[1], 10) * 60;
        _$jscoverage_done("lib/extensions.js", 56);
        var secParts = parts[2].split(".");
        _$jscoverage_done("lib/extensions.js", 59);
        secs += parseInt(secParts[0], 10);
        _$jscoverage_done("lib/extensions.js", 61);
        return secs;
    };
    _$jscoverage_done("lib/extensions.js", 64);
    command.prototype.parseVersionString = function(versionstr) {
        _$jscoverage_done("lib/extensions.js", 65);
        if (_$jscoverage_done("lib/extensions.js", 65, typeof versionstr != "string") || _$jscoverage_done("lib/extensions.js", 65, versionstr.indexOf(".") == -1)) {
            _$jscoverage_done("lib/extensions.js", 66);
            return false;
        }
        _$jscoverage_done("lib/extensions.js", 68);
        var x = versionstr.split(".");
        _$jscoverage_done("lib/extensions.js", 70);
        var maj = parseInt(x[0], 10) || 0;
        _$jscoverage_done("lib/extensions.js", 71);
        var min = parseInt(x[1], 10) || 0;
        _$jscoverage_done("lib/extensions.js", 72);
        var pat = parseInt(x[2], 10) || 0;
        _$jscoverage_done("lib/extensions.js", 73);
        return {
            major: maj,
            minor: min,
            patch: pat
        };
    };
    _$jscoverage_done("lib/extensions.js", 80);
    command.prototype.atLeastVersion = function(actualVersion, minVersion) {
        _$jscoverage_done("lib/extensions.js", 81);
        var minimum = this.parseVersionString(minVersion);
        _$jscoverage_done("lib/extensions.js", 82);
        var running = this.parseVersionString(actualVersion);
        _$jscoverage_done("lib/extensions.js", 86);
        if (_$jscoverage_done("lib/extensions.js", 86, !running)) {
            _$jscoverage_done("lib/extensions.js", 87);
            return true;
        }
        _$jscoverage_done("lib/extensions.js", 89);
        if (_$jscoverage_done("lib/extensions.js", 89, running.major !== minimum.major)) {
            _$jscoverage_done("lib/extensions.js", 90);
            return running.major > minimum.major;
        } else {
            _$jscoverage_done("lib/extensions.js", 92);
            if (_$jscoverage_done("lib/extensions.js", 92, running.minor !== minimum.minor)) {
                _$jscoverage_done("lib/extensions.js", 93);
                return running.minor > minimum.minor;
            } else {
                _$jscoverage_done("lib/extensions.js", 95);
                if (_$jscoverage_done("lib/extensions.js", 95, running.patch !== minimum.patch)) {
                    _$jscoverage_done("lib/extensions.js", 96);
                    return running.patch > minimum.patch;
                } else {
                    _$jscoverage_done("lib/extensions.js", 98);
                    return true;
                }
            }
        }
    };
};