// instrument by jscoverage, do not modifly this file
(function () {
  var BASE;
  if (typeof global === 'object') {
    BASE = global;
  } else if (typeof window === 'object') {
    BASE = window;
  } else {
    throw new Error('[jscoverage] unknow ENV!');
  }
  if (!BASE._$jscoverage) {
    BASE._$jscoverage = {};
    BASE._$jscoverage_cond = {};
    BASE._$jscoverage_done = function (file, line, express) {
      if (arguments.length === 2) {
        BASE._$jscoverage[file][line] ++;
      } else {
        BASE._$jscoverage_cond[file][line] ++;
        return express;
      }
    };
    BASE._$jscoverage_init = function (base, file, lines) {
      var tmp = [];
      for (var i = 0; i < lines.length; i ++) {
        tmp[lines[i]] = 0;
      }
      base[file] = tmp;
    };
  }
})();
_$jscoverage_init(_$jscoverage, "lib/fluent-ffmpeg.js",[1,14,21,23,32,35,36,37,39,40,41,43,44,48,51,72,74,75,76,77,79,81,83,85,86,87,89,90,91,93,94,95,97,98,100,101,103,104,105,107,108,109,110,112,114,116,117,118,120,121,122,124,125,126,128,129,130,132,133,134,136,137,138,140,141,142,144,145,146,147,149,151,152,153,155,156,157,159,160,162,163,164,166,167,168,170,171,172,174,175,176,178,179,180,182,183,184,186,187,188,190,191,192,193,194,195,196,198,202,204,205,206,208,209,210,213,214,215,218,219,220,222,223,224,226,227,229,233,234,235,237,238,240,241,242,244,245,246,248,249,250,254,255,258,259,260,262,264,265,266,267,270,271,272,274,277,281,282,285,287,288,289,290,292,293,297,298,301,302,304,308,314,315,316,317,318,320,321,326,327,329,330]);
_$jscoverage_init(_$jscoverage_cond, "lib/fluent-ffmpeg.js",[21,21,36,37,76,94,94,97,97,109,146,156,156,191,194,227,233,233,262,262,262,265,265,270,281,287,287,287,292,297,301,301]);
_$jscoverage["lib/fluent-ffmpeg.js"].source = ["var path = require('path'),","  async = require('async'),","  exec = require('child_process').exec,","  spawn = require('child_process').spawn;","","/* options object consists of the following keys:"," * - source: either a ReadableStream or the path to a file (required)"," * - timeout: timeout in seconds for all ffmpeg sub-processes (optional, defaults to 30)"," * - priority: default-priority for all ffmpeg sub-processes (optional, defaults to 0)"," * - logger: add a winston logging instance (optional, default is no logging)"," * - nolog: completely disables any logging"," */","function FfmpegCommand(args) {","  var source = args.source,","      timeout = args.timeout != null ? args.timeout : 30,","      priority = args.priority || 0,","      logger = args.logger || null,","      nologging = args.nolog || false,","      inputlive = args.inputlive || false;","","  if (!logger || nologging) {","    // create fake object to route log calls","    logger = {","      debug: function() {},","      info: function() {},","      warn: function() {},","      error: function() {}","    };","  }","","  // make sure execution is not killed on error","  logger.exitOnError = false;","","  // check if argument is a stream","  var srcstream, srcfile;","  if (typeof source === 'object') {","    if (source.readable) {","      // streaming mode","      source.pause();","      srcstream = source;","      srcfile = source.path;","    } else {","      logger.error('Source is not a ReadableStream instance');","      throw new Error('Source is not a ReadableStream instance');","    }","  } else {","    // file mode","    srcfile = source;","  }","","  this.options = {","    _isStreamable: true,","    _updateFlvMetadata: false,","    _useConstantVideoBitrate: false,","    _nice: { level: priority },","    keepPixelAspect: false,","    inputfile: srcfile,","    inputstream: srcstream,","    inputlive: inputlive,","    timeout: timeout,","    mergeList:[],","    video: {},","    audio: {},","    additional: [],","    otherInputs: [],","    informInputAudioCodec: null,","    informInputVideoCodec: null,","    logger: logger","  };","","  // public chaining methods","  FfmpegCommand.prototype.usingPreset = function(preset) {","    // require preset (since require() works like a singleton, multiple calls generate no overhead)","    try {","      var module = require('./presets/' + preset);","      if (typeof module.load === 'function') {","        module.load(this);","      }","      return this;","    } catch (err) {","      throw new Error('preset ' + preset + ' could not be loaded');","    }","    return this;","  };","  FfmpegCommand.prototype.withNoVideo = function() {","    this.options.video.skip = true;","    return this;","  };","  FfmpegCommand.prototype.withNoAudio = function() {","    this.options.audio.skip = true;","    return this;","  };","  FfmpegCommand.prototype.withVideoBitrate = function(vbitrate, type) {","    if (typeof vbitrate === 'string' && vbitrate.indexOf('k') > 0) {","      vbitrate = vbitrate.replace('k', '');","    }","    if (type && type === exports.CONSTANT_BITRATE) {","      this.options._useConstantVideoBitrate = true;","    }","    this.options.video.bitrate = parseInt(vbitrate, 10);","    return this;","  };","  FfmpegCommand.prototype.withSize = function(sizeString) {","    this.options.video.size = sizeString;","    return this;","  };","  FfmpegCommand.prototype.applyAutopadding = function(autopad, color) {","    this.options._applyAutopad = autopad;","    if (!color) {","      this.options.video.padcolor = 'black';","    } else {","      this.options.video.padcolor = color;","    }","    return this;","  };","  FfmpegCommand.prototype.withFps = function(fps) {","    this.options.video.fps = fps;","    return this;","  };","  FfmpegCommand.prototype.withFpsInput = function(fps) {","    this.options.video.fpsInput = fps;","    return this;","  };","  FfmpegCommand.prototype.withStrictExperimental = function() {","    this.options.strictExperimental = true;","    return this;","  }","  FfmpegCommand.prototype.withFpsOutput = function(fps) {","    this.options.video.fpsOutput = fps;","    return this;","  };","  FfmpegCommand.prototype.withAspect = function(aspectRatio) {","    this.options.video.aspect = aspectRatio;","    return this;","  };","  FfmpegCommand.prototype.keepPixelAspect = function(bool) {","    this.options.keepPixelAspect = bool ? true : false;","    return this;","  };","  FfmpegCommand.prototype.withVideoCodec = function(codec) {","    this.options.video.codec = codec;","    return this;","  };","  FfmpegCommand.prototype.loop = function(duration) {","    this.options.video.loop = true;","    if (duration) {","      this.options.duration = duration;","    }","    return this;","  };","  FfmpegCommand.prototype.takeFrames = function(frameCount) {","    this.options.video.framecount = frameCount;","    return this;","  };","  FfmpegCommand.prototype.withAudioBitrate = function(abitrate) {","    if (typeof abitrate === 'string' && abitrate.indexOf('k') > 0) {","      abitrate = abitrate.replace('k', '');","    }","    this.options.audio.bitrate = parseInt(abitrate, 10);","    return this;","  };","  FfmpegCommand.prototype.withAudioCodec = function(audiocodec){","    this.options.audio.codec = audiocodec;","    return this;","  };","  FfmpegCommand.prototype.withAudioChannels = function(audiochannels) {","    this.options.audio.channels = audiochannels;","    return this;","  };","  FfmpegCommand.prototype.withAudioFrequency = function(frequency) {","    this.options.audio.frequency = frequency;","    return this;","  };","  FfmpegCommand.prototype.withAudioQuality = function(quality) {","    this.options.audio.quality = parseInt(quality, 10);","    return this;","  };","  FfmpegCommand.prototype.setStartTime = function(timestamp) {","    this.options.starttime = timestamp;","    return this;","  };","  FfmpegCommand.prototype.setDuration = function(duration) {","    this.options.duration = duration;","    return this;","  };","  FfmpegCommand.prototype.addInput = function(inputFile) {","    this.options.otherInputs.push(inputFile);","    return this;","  };","  FfmpegCommand.prototype.addOptions = function(optionArray) {","    if (typeof optionArray.length !== undefined) {","        var self = this;","        optionArray.forEach(function(el) {","          if (el.indexOf(' ') > 0) {","            var values = el.split(' ');","            self.options.additional.push(values[0], values[1]);","          } else {","            self.options.additional.push(el);","          }","        });","    }","    return this;","  };","  FfmpegCommand.prototype.addOption = function(option, value) {","    this.options.additional.push(option, value);","    return this;","  };","  FfmpegCommand.prototype.mergeAdd = function(path){","    this.options.mergeList.push(path);","    return this;","  };","","  FfmpegCommand.prototype.fromFormat = function(format) {","    this.options.fromFormat = format;","    return this;","  };","","  FfmpegCommand.prototype.toFormat = function(format) {","    this.options.format = format;","    return this;","  };","  FfmpegCommand.prototype.updateFlvMetadata = function() {","    this.options._updateFlvMetadata = true;","    return this;","  };","  FfmpegCommand.prototype.renice = function(level) {","    if (!level) {","      // use 0 as default nice level (os default)","      level = 0;","    }","","    // make sure niceness is within allowed boundaries","    if (level > 20 || level < -20) {","      this.options.logger.warn('niceness ' + level + ' is not valid, consider a value between -20 and +20 (whereas -20 is the highest priority)');","      level = 0;","    }","    this.options._nice.level = level;","    return this;","  };","  FfmpegCommand.prototype.onStart = function(callback) {","    this.options.onStart = callback;","    return this;","  };","  FfmpegCommand.prototype.onCodecData = function(callback) {","    this.options.onCodecData = callback;","    return this;","  };","  FfmpegCommand.prototype.onProgress = function(callback) {","    this.options.onProgress = callback;","    return this;","  };","","  // private methods","  FfmpegCommand.prototype._prepare = function(callback) {","    var calcDimensions = false, calcPadding = false;","","    // check for allowed sizestring formats and handle them accordingly","    var fixedWidth = /([0-9]+)x\\?/.exec(this.options.video.size);","    var fixedHeight = /\\?x([0-9]+)/.exec(this.options.video.size);","    var percentRatio = /\\b([0-9]{1,3})%/.exec(this.options.video.size);","","    if (!fixedWidth && !fixedHeight && !percentRatio) {","      // check for invalid size string","      var defaultSizestring = /([0-9]+)x([0-9]+)/.exec(this.options.video.size);","      if (this.options.video.size && !defaultSizestring) {","        callback(new Error('could not parse size string, aborting execution'));","        return;","      } else {","        // get width and height as integers (used for padding calculation)","        if (defaultSizestring) {","          this.options.video.width = parseInt(defaultSizestring[1], 10);","          this.options.video.height = parseInt(defaultSizestring[2], 10);","        }","        calcDimensions = false;","      }","    } else {","      calcDimensions = true;","    }","","    // check if we have to check aspect ratio for changes and auto-pad the output","    if (this.options._applyAutopad) {","      calcPadding = true;","    }","","    var self = this;","","    if (calcDimensions || calcPadding || this.requiresMetaData()) {","      this.getMetadata(this.options.inputfile, function(meta, err) {","        self.metaData = meta;","        var dimErr, padErr;","        // calculate dimensions","        if (calcDimensions) {","          dimErr = self._calculateDimensions(meta);","        }","","        // calculate padding","        if (calcPadding) {","          padErr = self._calculatePadding(meta);","        }","","        if (dimErr || padErr) {","          callback(new Error('error while preparing: dimension -> ' + dimErr + ' padding -> ' + padErr));","        } else {","          callback(undefined);","        }","      });","    } else {","      callback(undefined);","    }","  };","}","","// add module methods","require('./extensions')(FfmpegCommand);","var metaDataLib = require('./metadata')(FfmpegCommand);","require('./processor')(FfmpegCommand);","require('./calculate')(FfmpegCommand);","require('./debug')(FfmpegCommand);","// module exports","exports = module.exports = function(args) {","  return new FfmpegCommand(args);","};","","// export meta data discovery","","exports.Metadata = metaDataLib;","exports.Calculate = require('./calculate');","","exports.CONSTANT_BITRATE = 1;","exports.VARIABLE_BITRATE = 2;",""];
_$jscoverage_done("lib/fluent-ffmpeg.js", 1);
var path = require("path"), async = require("async"), exec = require("child_process").exec, spawn = require("child_process").spawn;

function FfmpegCommand(args) {
    _$jscoverage_done("lib/fluent-ffmpeg.js", 14);
    var source = args.source, timeout = args.timeout != null ? args.timeout : 30, priority = args.priority || 0, logger = args.logger || null, nologging = args.nolog || false, inputlive = args.inputlive || false;
    _$jscoverage_done("lib/fluent-ffmpeg.js", 21);
    if (_$jscoverage_done("lib/fluent-ffmpeg.js", 21, !logger) || _$jscoverage_done("lib/fluent-ffmpeg.js", 21, nologging)) {
        _$jscoverage_done("lib/fluent-ffmpeg.js", 23);
        logger = {
            debug: function() {},
            info: function() {},
            warn: function() {},
            error: function() {}
        };
    }
    _$jscoverage_done("lib/fluent-ffmpeg.js", 32);
    logger.exitOnError = false;
    _$jscoverage_done("lib/fluent-ffmpeg.js", 35);
    var srcstream, srcfile;
    _$jscoverage_done("lib/fluent-ffmpeg.js", 36);
    if (_$jscoverage_done("lib/fluent-ffmpeg.js", 36, typeof source === "object")) {
        _$jscoverage_done("lib/fluent-ffmpeg.js", 37);
        if (_$jscoverage_done("lib/fluent-ffmpeg.js", 37, source.readable)) {
            _$jscoverage_done("lib/fluent-ffmpeg.js", 39);
            source.pause();
            _$jscoverage_done("lib/fluent-ffmpeg.js", 40);
            srcstream = source;
            _$jscoverage_done("lib/fluent-ffmpeg.js", 41);
            srcfile = source.path;
        } else {
            _$jscoverage_done("lib/fluent-ffmpeg.js", 43);
            logger.error("Source is not a ReadableStream instance");
            _$jscoverage_done("lib/fluent-ffmpeg.js", 44);
            throw new Error("Source is not a ReadableStream instance");
        }
    } else {
        _$jscoverage_done("lib/fluent-ffmpeg.js", 48);
        srcfile = source;
    }
    _$jscoverage_done("lib/fluent-ffmpeg.js", 51);
    this.options = {
        _isStreamable: true,
        _updateFlvMetadata: false,
        _useConstantVideoBitrate: false,
        _nice: {
            level: priority
        },
        keepPixelAspect: false,
        inputfile: srcfile,
        inputstream: srcstream,
        inputlive: inputlive,
        timeout: timeout,
        mergeList: [],
        video: {},
        audio: {},
        additional: [],
        otherInputs: [],
        informInputAudioCodec: null,
        informInputVideoCodec: null,
        logger: logger
    };
    _$jscoverage_done("lib/fluent-ffmpeg.js", 72);
    FfmpegCommand.prototype.usingPreset = function(preset) {
        _$jscoverage_done("lib/fluent-ffmpeg.js", 74);
        try {
            _$jscoverage_done("lib/fluent-ffmpeg.js", 75);
            var module = require("./presets/" + preset);
            _$jscoverage_done("lib/fluent-ffmpeg.js", 76);
            if (_$jscoverage_done("lib/fluent-ffmpeg.js", 76, typeof module.load === "function")) {
                _$jscoverage_done("lib/fluent-ffmpeg.js", 77);
                module.load(this);
            }
            _$jscoverage_done("lib/fluent-ffmpeg.js", 79);
            return this;
        } catch (err) {
            _$jscoverage_done("lib/fluent-ffmpeg.js", 81);
            throw new Error("preset " + preset + " could not be loaded");
        }
        _$jscoverage_done("lib/fluent-ffmpeg.js", 83);
        return this;
    };
    _$jscoverage_done("lib/fluent-ffmpeg.js", 85);
    FfmpegCommand.prototype.withNoVideo = function() {
        _$jscoverage_done("lib/fluent-ffmpeg.js", 86);
        this.options.video.skip = true;
        _$jscoverage_done("lib/fluent-ffmpeg.js", 87);
        return this;
    };
    _$jscoverage_done("lib/fluent-ffmpeg.js", 89);
    FfmpegCommand.prototype.withNoAudio = function() {
        _$jscoverage_done("lib/fluent-ffmpeg.js", 90);
        this.options.audio.skip = true;
        _$jscoverage_done("lib/fluent-ffmpeg.js", 91);
        return this;
    };
    _$jscoverage_done("lib/fluent-ffmpeg.js", 93);
    FfmpegCommand.prototype.withVideoBitrate = function(vbitrate, type) {
        _$jscoverage_done("lib/fluent-ffmpeg.js", 94);
        if (_$jscoverage_done("lib/fluent-ffmpeg.js", 94, typeof vbitrate === "string") && _$jscoverage_done("lib/fluent-ffmpeg.js", 94, vbitrate.indexOf("k") > 0)) {
            _$jscoverage_done("lib/fluent-ffmpeg.js", 95);
            vbitrate = vbitrate.replace("k", "");
        }
        _$jscoverage_done("lib/fluent-ffmpeg.js", 97);
        if (_$jscoverage_done("lib/fluent-ffmpeg.js", 97, type) && _$jscoverage_done("lib/fluent-ffmpeg.js", 97, type === exports.CONSTANT_BITRATE)) {
            _$jscoverage_done("lib/fluent-ffmpeg.js", 98);
            this.options._useConstantVideoBitrate = true;
        }
        _$jscoverage_done("lib/fluent-ffmpeg.js", 100);
        this.options.video.bitrate = parseInt(vbitrate, 10);
        _$jscoverage_done("lib/fluent-ffmpeg.js", 101);
        return this;
    };
    _$jscoverage_done("lib/fluent-ffmpeg.js", 103);
    FfmpegCommand.prototype.withSize = function(sizeString) {
        _$jscoverage_done("lib/fluent-ffmpeg.js", 104);
        this.options.video.size = sizeString;
        _$jscoverage_done("lib/fluent-ffmpeg.js", 105);
        return this;
    };
    _$jscoverage_done("lib/fluent-ffmpeg.js", 107);
    FfmpegCommand.prototype.applyAutopadding = function(autopad, color) {
        _$jscoverage_done("lib/fluent-ffmpeg.js", 108);
        this.options._applyAutopad = autopad;
        _$jscoverage_done("lib/fluent-ffmpeg.js", 109);
        if (_$jscoverage_done("lib/fluent-ffmpeg.js", 109, !color)) {
            _$jscoverage_done("lib/fluent-ffmpeg.js", 110);
            this.options.video.padcolor = "black";
        } else {
            _$jscoverage_done("lib/fluent-ffmpeg.js", 112);
            this.options.video.padcolor = color;
        }
        _$jscoverage_done("lib/fluent-ffmpeg.js", 114);
        return this;
    };
    _$jscoverage_done("lib/fluent-ffmpeg.js", 116);
    FfmpegCommand.prototype.withFps = function(fps) {
        _$jscoverage_done("lib/fluent-ffmpeg.js", 117);
        this.options.video.fps = fps;
        _$jscoverage_done("lib/fluent-ffmpeg.js", 118);
        return this;
    };
    _$jscoverage_done("lib/fluent-ffmpeg.js", 120);
    FfmpegCommand.prototype.withFpsInput = function(fps) {
        _$jscoverage_done("lib/fluent-ffmpeg.js", 121);
        this.options.video.fpsInput = fps;
        _$jscoverage_done("lib/fluent-ffmpeg.js", 122);
        return this;
    };
    _$jscoverage_done("lib/fluent-ffmpeg.js", 124);
    FfmpegCommand.prototype.withStrictExperimental = function() {
        _$jscoverage_done("lib/fluent-ffmpeg.js", 125);
        this.options.strictExperimental = true;
        _$jscoverage_done("lib/fluent-ffmpeg.js", 126);
        return this;
    };
    _$jscoverage_done("lib/fluent-ffmpeg.js", 128);
    FfmpegCommand.prototype.withFpsOutput = function(fps) {
        _$jscoverage_done("lib/fluent-ffmpeg.js", 129);
        this.options.video.fpsOutput = fps;
        _$jscoverage_done("lib/fluent-ffmpeg.js", 130);
        return this;
    };
    _$jscoverage_done("lib/fluent-ffmpeg.js", 132);
    FfmpegCommand.prototype.withAspect = function(aspectRatio) {
        _$jscoverage_done("lib/fluent-ffmpeg.js", 133);
        this.options.video.aspect = aspectRatio;
        _$jscoverage_done("lib/fluent-ffmpeg.js", 134);
        return this;
    };
    _$jscoverage_done("lib/fluent-ffmpeg.js", 136);
    FfmpegCommand.prototype.keepPixelAspect = function(bool) {
        _$jscoverage_done("lib/fluent-ffmpeg.js", 137);
        this.options.keepPixelAspect = bool ? true : false;
        _$jscoverage_done("lib/fluent-ffmpeg.js", 138);
        return this;
    };
    _$jscoverage_done("lib/fluent-ffmpeg.js", 140);
    FfmpegCommand.prototype.withVideoCodec = function(codec) {
        _$jscoverage_done("lib/fluent-ffmpeg.js", 141);
        this.options.video.codec = codec;
        _$jscoverage_done("lib/fluent-ffmpeg.js", 142);
        return this;
    };
    _$jscoverage_done("lib/fluent-ffmpeg.js", 144);
    FfmpegCommand.prototype.loop = function(duration) {
        _$jscoverage_done("lib/fluent-ffmpeg.js", 145);
        this.options.video.loop = true;
        _$jscoverage_done("lib/fluent-ffmpeg.js", 146);
        if (_$jscoverage_done("lib/fluent-ffmpeg.js", 146, duration)) {
            _$jscoverage_done("lib/fluent-ffmpeg.js", 147);
            this.options.duration = duration;
        }
        _$jscoverage_done("lib/fluent-ffmpeg.js", 149);
        return this;
    };
    _$jscoverage_done("lib/fluent-ffmpeg.js", 151);
    FfmpegCommand.prototype.takeFrames = function(frameCount) {
        _$jscoverage_done("lib/fluent-ffmpeg.js", 152);
        this.options.video.framecount = frameCount;
        _$jscoverage_done("lib/fluent-ffmpeg.js", 153);
        return this;
    };
    _$jscoverage_done("lib/fluent-ffmpeg.js", 155);
    FfmpegCommand.prototype.withAudioBitrate = function(abitrate) {
        _$jscoverage_done("lib/fluent-ffmpeg.js", 156);
        if (_$jscoverage_done("lib/fluent-ffmpeg.js", 156, typeof abitrate === "string") && _$jscoverage_done("lib/fluent-ffmpeg.js", 156, abitrate.indexOf("k") > 0)) {
            _$jscoverage_done("lib/fluent-ffmpeg.js", 157);
            abitrate = abitrate.replace("k", "");
        }
        _$jscoverage_done("lib/fluent-ffmpeg.js", 159);
        this.options.audio.bitrate = parseInt(abitrate, 10);
        _$jscoverage_done("lib/fluent-ffmpeg.js", 160);
        return this;
    };
    _$jscoverage_done("lib/fluent-ffmpeg.js", 162);
    FfmpegCommand.prototype.withAudioCodec = function(audiocodec) {
        _$jscoverage_done("lib/fluent-ffmpeg.js", 163);
        this.options.audio.codec = audiocodec;
        _$jscoverage_done("lib/fluent-ffmpeg.js", 164);
        return this;
    };
    _$jscoverage_done("lib/fluent-ffmpeg.js", 166);
    FfmpegCommand.prototype.withAudioChannels = function(audiochannels) {
        _$jscoverage_done("lib/fluent-ffmpeg.js", 167);
        this.options.audio.channels = audiochannels;
        _$jscoverage_done("lib/fluent-ffmpeg.js", 168);
        return this;
    };
    _$jscoverage_done("lib/fluent-ffmpeg.js", 170);
    FfmpegCommand.prototype.withAudioFrequency = function(frequency) {
        _$jscoverage_done("lib/fluent-ffmpeg.js", 171);
        this.options.audio.frequency = frequency;
        _$jscoverage_done("lib/fluent-ffmpeg.js", 172);
        return this;
    };
    _$jscoverage_done("lib/fluent-ffmpeg.js", 174);
    FfmpegCommand.prototype.withAudioQuality = function(quality) {
        _$jscoverage_done("lib/fluent-ffmpeg.js", 175);
        this.options.audio.quality = parseInt(quality, 10);
        _$jscoverage_done("lib/fluent-ffmpeg.js", 176);
        return this;
    };
    _$jscoverage_done("lib/fluent-ffmpeg.js", 178);
    FfmpegCommand.prototype.setStartTime = function(timestamp) {
        _$jscoverage_done("lib/fluent-ffmpeg.js", 179);
        this.options.starttime = timestamp;
        _$jscoverage_done("lib/fluent-ffmpeg.js", 180);
        return this;
    };
    _$jscoverage_done("lib/fluent-ffmpeg.js", 182);
    FfmpegCommand.prototype.setDuration = function(duration) {
        _$jscoverage_done("lib/fluent-ffmpeg.js", 183);
        this.options.duration = duration;
        _$jscoverage_done("lib/fluent-ffmpeg.js", 184);
        return this;
    };
    _$jscoverage_done("lib/fluent-ffmpeg.js", 186);
    FfmpegCommand.prototype.addInput = function(inputFile) {
        _$jscoverage_done("lib/fluent-ffmpeg.js", 187);
        this.options.otherInputs.push(inputFile);
        _$jscoverage_done("lib/fluent-ffmpeg.js", 188);
        return this;
    };
    _$jscoverage_done("lib/fluent-ffmpeg.js", 190);
    FfmpegCommand.prototype.addOptions = function(optionArray) {
        _$jscoverage_done("lib/fluent-ffmpeg.js", 191);
        if (_$jscoverage_done("lib/fluent-ffmpeg.js", 191, typeof optionArray.length !== undefined)) {
            _$jscoverage_done("lib/fluent-ffmpeg.js", 192);
            var self = this;
            _$jscoverage_done("lib/fluent-ffmpeg.js", 193);
            optionArray.forEach(function(el) {
                _$jscoverage_done("lib/fluent-ffmpeg.js", 194);
                if (_$jscoverage_done("lib/fluent-ffmpeg.js", 194, el.indexOf(" ") > 0)) {
                    _$jscoverage_done("lib/fluent-ffmpeg.js", 195);
                    var values = el.split(" ");
                    _$jscoverage_done("lib/fluent-ffmpeg.js", 196);
                    self.options.additional.push(values[0], values[1]);
                } else {
                    _$jscoverage_done("lib/fluent-ffmpeg.js", 198);
                    self.options.additional.push(el);
                }
            });
        }
        _$jscoverage_done("lib/fluent-ffmpeg.js", 202);
        return this;
    };
    _$jscoverage_done("lib/fluent-ffmpeg.js", 204);
    FfmpegCommand.prototype.addOption = function(option, value) {
        _$jscoverage_done("lib/fluent-ffmpeg.js", 205);
        this.options.additional.push(option, value);
        _$jscoverage_done("lib/fluent-ffmpeg.js", 206);
        return this;
    };
    _$jscoverage_done("lib/fluent-ffmpeg.js", 208);
    FfmpegCommand.prototype.mergeAdd = function(path) {
        _$jscoverage_done("lib/fluent-ffmpeg.js", 209);
        this.options.mergeList.push(path);
        _$jscoverage_done("lib/fluent-ffmpeg.js", 210);
        return this;
    };
    _$jscoverage_done("lib/fluent-ffmpeg.js", 213);
    FfmpegCommand.prototype.fromFormat = function(format) {
        _$jscoverage_done("lib/fluent-ffmpeg.js", 214);
        this.options.fromFormat = format;
        _$jscoverage_done("lib/fluent-ffmpeg.js", 215);
        return this;
    };
    _$jscoverage_done("lib/fluent-ffmpeg.js", 218);
    FfmpegCommand.prototype.toFormat = function(format) {
        _$jscoverage_done("lib/fluent-ffmpeg.js", 219);
        this.options.format = format;
        _$jscoverage_done("lib/fluent-ffmpeg.js", 220);
        return this;
    };
    _$jscoverage_done("lib/fluent-ffmpeg.js", 222);
    FfmpegCommand.prototype.updateFlvMetadata = function() {
        _$jscoverage_done("lib/fluent-ffmpeg.js", 223);
        this.options._updateFlvMetadata = true;
        _$jscoverage_done("lib/fluent-ffmpeg.js", 224);
        return this;
    };
    _$jscoverage_done("lib/fluent-ffmpeg.js", 226);
    FfmpegCommand.prototype.renice = function(level) {
        _$jscoverage_done("lib/fluent-ffmpeg.js", 227);
        if (_$jscoverage_done("lib/fluent-ffmpeg.js", 227, !level)) {
            _$jscoverage_done("lib/fluent-ffmpeg.js", 229);
            level = 0;
        }
        _$jscoverage_done("lib/fluent-ffmpeg.js", 233);
        if (_$jscoverage_done("lib/fluent-ffmpeg.js", 233, level > 20) || _$jscoverage_done("lib/fluent-ffmpeg.js", 233, level < -20)) {
            _$jscoverage_done("lib/fluent-ffmpeg.js", 234);
            this.options.logger.warn("niceness " + level + " is not valid, consider a value between -20 and +20 (whereas -20 is the highest priority)");
            _$jscoverage_done("lib/fluent-ffmpeg.js", 235);
            level = 0;
        }
        _$jscoverage_done("lib/fluent-ffmpeg.js", 237);
        this.options._nice.level = level;
        _$jscoverage_done("lib/fluent-ffmpeg.js", 238);
        return this;
    };
    _$jscoverage_done("lib/fluent-ffmpeg.js", 240);
    FfmpegCommand.prototype.onStart = function(callback) {
        _$jscoverage_done("lib/fluent-ffmpeg.js", 241);
        this.options.onStart = callback;
        _$jscoverage_done("lib/fluent-ffmpeg.js", 242);
        return this;
    };
    _$jscoverage_done("lib/fluent-ffmpeg.js", 244);
    FfmpegCommand.prototype.onCodecData = function(callback) {
        _$jscoverage_done("lib/fluent-ffmpeg.js", 245);
        this.options.onCodecData = callback;
        _$jscoverage_done("lib/fluent-ffmpeg.js", 246);
        return this;
    };
    _$jscoverage_done("lib/fluent-ffmpeg.js", 248);
    FfmpegCommand.prototype.onProgress = function(callback) {
        _$jscoverage_done("lib/fluent-ffmpeg.js", 249);
        this.options.onProgress = callback;
        _$jscoverage_done("lib/fluent-ffmpeg.js", 250);
        return this;
    };
    _$jscoverage_done("lib/fluent-ffmpeg.js", 254);
    FfmpegCommand.prototype._prepare = function(callback) {
        _$jscoverage_done("lib/fluent-ffmpeg.js", 255);
        var calcDimensions = false, calcPadding = false;
        _$jscoverage_done("lib/fluent-ffmpeg.js", 258);
        var fixedWidth = /([0-9]+)x\?/.exec(this.options.video.size);
        _$jscoverage_done("lib/fluent-ffmpeg.js", 259);
        var fixedHeight = /\?x([0-9]+)/.exec(this.options.video.size);
        _$jscoverage_done("lib/fluent-ffmpeg.js", 260);
        var percentRatio = /\b([0-9]{1,3})%/.exec(this.options.video.size);
        _$jscoverage_done("lib/fluent-ffmpeg.js", 262);
        if (_$jscoverage_done("lib/fluent-ffmpeg.js", 262, !fixedWidth) && _$jscoverage_done("lib/fluent-ffmpeg.js", 262, !fixedHeight) && _$jscoverage_done("lib/fluent-ffmpeg.js", 262, !percentRatio)) {
            _$jscoverage_done("lib/fluent-ffmpeg.js", 264);
            var defaultSizestring = /([0-9]+)x([0-9]+)/.exec(this.options.video.size);
            _$jscoverage_done("lib/fluent-ffmpeg.js", 265);
            if (_$jscoverage_done("lib/fluent-ffmpeg.js", 265, this.options.video.size) && _$jscoverage_done("lib/fluent-ffmpeg.js", 265, !defaultSizestring)) {
                _$jscoverage_done("lib/fluent-ffmpeg.js", 266);
                callback(new Error("could not parse size string, aborting execution"));
                _$jscoverage_done("lib/fluent-ffmpeg.js", 267);
                return;
            } else {
                _$jscoverage_done("lib/fluent-ffmpeg.js", 270);
                if (_$jscoverage_done("lib/fluent-ffmpeg.js", 270, defaultSizestring)) {
                    _$jscoverage_done("lib/fluent-ffmpeg.js", 271);
                    this.options.video.width = parseInt(defaultSizestring[1], 10);
                    _$jscoverage_done("lib/fluent-ffmpeg.js", 272);
                    this.options.video.height = parseInt(defaultSizestring[2], 10);
                }
                _$jscoverage_done("lib/fluent-ffmpeg.js", 274);
                calcDimensions = false;
            }
        } else {
            _$jscoverage_done("lib/fluent-ffmpeg.js", 277);
            calcDimensions = true;
        }
        _$jscoverage_done("lib/fluent-ffmpeg.js", 281);
        if (_$jscoverage_done("lib/fluent-ffmpeg.js", 281, this.options._applyAutopad)) {
            _$jscoverage_done("lib/fluent-ffmpeg.js", 282);
            calcPadding = true;
        }
        _$jscoverage_done("lib/fluent-ffmpeg.js", 285);
        var self = this;
        _$jscoverage_done("lib/fluent-ffmpeg.js", 287);
        if (_$jscoverage_done("lib/fluent-ffmpeg.js", 287, calcDimensions) || _$jscoverage_done("lib/fluent-ffmpeg.js", 287, calcPadding) || _$jscoverage_done("lib/fluent-ffmpeg.js", 287, this.requiresMetaData())) {
            _$jscoverage_done("lib/fluent-ffmpeg.js", 288);
            this.getMetadata(this.options.inputfile, function(meta, err) {
                _$jscoverage_done("lib/fluent-ffmpeg.js", 289);
                self.metaData = meta;
                _$jscoverage_done("lib/fluent-ffmpeg.js", 290);
                var dimErr, padErr;
                _$jscoverage_done("lib/fluent-ffmpeg.js", 292);
                if (_$jscoverage_done("lib/fluent-ffmpeg.js", 292, calcDimensions)) {
                    _$jscoverage_done("lib/fluent-ffmpeg.js", 293);
                    dimErr = self._calculateDimensions(meta);
                }
                _$jscoverage_done("lib/fluent-ffmpeg.js", 297);
                if (_$jscoverage_done("lib/fluent-ffmpeg.js", 297, calcPadding)) {
                    _$jscoverage_done("lib/fluent-ffmpeg.js", 298);
                    padErr = self._calculatePadding(meta);
                }
                _$jscoverage_done("lib/fluent-ffmpeg.js", 301);
                if (_$jscoverage_done("lib/fluent-ffmpeg.js", 301, dimErr) || _$jscoverage_done("lib/fluent-ffmpeg.js", 301, padErr)) {
                    _$jscoverage_done("lib/fluent-ffmpeg.js", 302);
                    callback(new Error("error while preparing: dimension -> " + dimErr + " padding -> " + padErr));
                } else {
                    _$jscoverage_done("lib/fluent-ffmpeg.js", 304);
                    callback(undefined);
                }
            });
        } else {
            _$jscoverage_done("lib/fluent-ffmpeg.js", 308);
            callback(undefined);
        }
    };
}

_$jscoverage_done("lib/fluent-ffmpeg.js", 314);
require("./extensions")(FfmpegCommand);

_$jscoverage_done("lib/fluent-ffmpeg.js", 315);
var metaDataLib = require("./metadata")(FfmpegCommand);

_$jscoverage_done("lib/fluent-ffmpeg.js", 316);
require("./processor")(FfmpegCommand);

_$jscoverage_done("lib/fluent-ffmpeg.js", 317);
require("./calculate")(FfmpegCommand);

_$jscoverage_done("lib/fluent-ffmpeg.js", 318);
require("./debug")(FfmpegCommand);

_$jscoverage_done("lib/fluent-ffmpeg.js", 320);
exports = module.exports = function(args) {
    _$jscoverage_done("lib/fluent-ffmpeg.js", 321);
    return new FfmpegCommand(args);
};

_$jscoverage_done("lib/fluent-ffmpeg.js", 326);
exports.Metadata = metaDataLib;

_$jscoverage_done("lib/fluent-ffmpeg.js", 327);
exports.Calculate = require("./calculate");

_$jscoverage_done("lib/fluent-ffmpeg.js", 329);
exports.CONSTANT_BITRATE = 1;

_$jscoverage_done("lib/fluent-ffmpeg.js", 330);
exports.VARIABLE_BITRATE = 2;