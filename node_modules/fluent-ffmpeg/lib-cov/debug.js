// instrument by jscoverage, do not modifly this file
(function () {
  var BASE;
  if (typeof global === 'object') {
    BASE = global;
  } else if (typeof window === 'object') {
    BASE = window;
  } else {
    throw new Error('[jscoverage] unknow ENV!');
  }
  if (!BASE._$jscoverage) {
    BASE._$jscoverage = {};
    BASE._$jscoverage_cond = {};
    BASE._$jscoverage_done = function (file, line, express) {
      if (arguments.length === 2) {
        BASE._$jscoverage[file][line] ++;
      } else {
        BASE._$jscoverage_cond[file][line] ++;
        return express;
      }
    };
    BASE._$jscoverage_init = function (base, file, lines) {
      var tmp = [];
      for (var i = 0; i < lines.length; i ++) {
        tmp[lines[i]] = 0;
      }
      base[file] = tmp;
    };
  }
})();
_$jscoverage_init(_$jscoverage, "lib/debug.js",[1,2,3,4,5,6,8,10,11,13,14,15,16,18,22,25,26,27,28,29,30,32,34,35,37,42]);
_$jscoverage_init(_$jscoverage_cond, "lib/debug.js",[5,10,26,29,34]);
_$jscoverage["lib/debug.js"].source = ["exports = module.exports = function Debug(command) {","  command.prototype.getCommand = function(outputmethod, callback) {","    var self = this;","    this._prepare(function(err, meta) {","      if (err) {","        callback(null, err);","      } else {","        var args = self.buildFfmpegArgs(true, meta);","        // kinda hacky, have to make sure the returned object is no array","        if (args.length === undefined) {","          callback(null, args);","        } else {","          var cmd = '';","          cmd += 'ffmpeg';","          args.forEach(function(el) {","            cmd += ' ' + el;","          });","          callback(cmd, null);","        }","      }","    });","    return this;","  };","","  command.prototype.getArgs = function(callback) {","    if (callback) {","      var self = this;","      this._prepare(function(err, meta) {","        if (err) {","          callback(null, err);","        } else {","          var args = self.buildFfmpegArgs(true, meta);","          // kinda hacky, have to make sure the returned object is no array","          if (args.length === undefined) {","            callback(null, args);","          } else {","            callback(args, null);","          }","        }","      });","    } else {","      return this.buildFfmpegArgs(true, null);","    }","  };","};"];
_$jscoverage_done("lib/debug.js", 1);
exports = module.exports = function Debug(command) {
    _$jscoverage_done("lib/debug.js", 2);
    command.prototype.getCommand = function(outputmethod, callback) {
        _$jscoverage_done("lib/debug.js", 3);
        var self = this;
        _$jscoverage_done("lib/debug.js", 4);
        this._prepare(function(err, meta) {
            _$jscoverage_done("lib/debug.js", 5);
            if (_$jscoverage_done("lib/debug.js", 5, err)) {
                _$jscoverage_done("lib/debug.js", 6);
                callback(null, err);
            } else {
                _$jscoverage_done("lib/debug.js", 8);
                var args = self.buildFfmpegArgs(true, meta);
                _$jscoverage_done("lib/debug.js", 10);
                if (_$jscoverage_done("lib/debug.js", 10, args.length === undefined)) {
                    _$jscoverage_done("lib/debug.js", 11);
                    callback(null, args);
                } else {
                    _$jscoverage_done("lib/debug.js", 13);
                    var cmd = "";
                    _$jscoverage_done("lib/debug.js", 14);
                    cmd += "ffmpeg";
                    _$jscoverage_done("lib/debug.js", 15);
                    args.forEach(function(el) {
                        _$jscoverage_done("lib/debug.js", 16);
                        cmd += " " + el;
                    });
                    _$jscoverage_done("lib/debug.js", 18);
                    callback(cmd, null);
                }
            }
        });
        _$jscoverage_done("lib/debug.js", 22);
        return this;
    };
    _$jscoverage_done("lib/debug.js", 25);
    command.prototype.getArgs = function(callback) {
        _$jscoverage_done("lib/debug.js", 26);
        if (_$jscoverage_done("lib/debug.js", 26, callback)) {
            _$jscoverage_done("lib/debug.js", 27);
            var self = this;
            _$jscoverage_done("lib/debug.js", 28);
            this._prepare(function(err, meta) {
                _$jscoverage_done("lib/debug.js", 29);
                if (_$jscoverage_done("lib/debug.js", 29, err)) {
                    _$jscoverage_done("lib/debug.js", 30);
                    callback(null, err);
                } else {
                    _$jscoverage_done("lib/debug.js", 32);
                    var args = self.buildFfmpegArgs(true, meta);
                    _$jscoverage_done("lib/debug.js", 34);
                    if (_$jscoverage_done("lib/debug.js", 34, args.length === undefined)) {
                        _$jscoverage_done("lib/debug.js", 35);
                        callback(null, args);
                    } else {
                        _$jscoverage_done("lib/debug.js", 37);
                        callback(args, null);
                    }
                }
            });
        } else {
            _$jscoverage_done("lib/debug.js", 42);
            return this.buildFfmpegArgs(true, null);
        }
    };
};