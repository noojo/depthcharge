// instrument by jscoverage, do not modifly this file
(function () {
  var BASE;
  if (typeof global === 'object') {
    BASE = global;
  } else if (typeof window === 'object') {
    BASE = window;
  } else {
    throw new Error('[jscoverage] unknow ENV!');
  }
  if (!BASE._$jscoverage) {
    BASE._$jscoverage = {};
    BASE._$jscoverage_cond = {};
    BASE._$jscoverage_done = function (file, line, express) {
      if (arguments.length === 2) {
        BASE._$jscoverage[file][line] ++;
      } else {
        BASE._$jscoverage_cond[file][line] ++;
        return express;
      }
    };
    BASE._$jscoverage_init = function (base, file, lines) {
      var tmp = [];
      for (var i = 0; i < lines.length; i ++) {
        tmp[lines[i]] = 0;
      }
      base[file] = tmp;
    };
  }
})();
_$jscoverage_init(_$jscoverage, "lib/calculate.js",[1,2,3,4,5,6,8,12,13,14,16,17,18,20,21,24,28,29,30,33,34,36,38,39,40,41,42,45,51,52,54,55,56,57,58,61,67,72,76,78,79,80,82,83,85,86,89,90,92,93,96,98,99,100,101,102,105,108,109,111,113,114,117,120,121,122,123,124,127,130,131,133,135,136,139,140,141,143,147,148,150,151,154,156,157,161]);
_$jscoverage_init(_$jscoverage_cond, "lib/calculate.js",[5,5,13,16,16,18,28,28,33,36,52,85,90,90,92,98,100,111,111,113,120,122,133,133,135,135,147,150]);
_$jscoverage["lib/calculate.js"].source = ["exports = module.exports = function Calculate(command) {","  command.prototype._aspectIsEqual = function(ar1, ar2) {","    var p1 = this.toAspectRatio(ar1);","    var p2 = this.toAspectRatio(ar2);","    if (p1 === undefined || p2 === undefined) {","      return false;","    } else {","      return (p1.x === p2.x && p1.y === p2.y);","    }","  };","","  command.prototype._calculatePadding = function(data) {","    if (data.video.aspect) {","      var newaspect, padAmount;","      // check if the aspect ratio has changed","      if (this.options.video.aspect && !this.options.video.size) {","        newaspect = this.options.video.aspect;","      } else if (!this.options.video.aspect) {","        // check aspect ratio change by calculating new aspect ratio from size (using greatest common divider, GCD)","        var ratio = this.gcd(this.options.video.width, this.options.video.height);","        newaspect = this.options.video.width / ratio + ':' + this.options.video.height / ratio;","      } else {","        // we have both aspect ratio and size set, all calculations are fine","        newaspect = this.options.video.aspect;","      }","","      // if there are still no sizes for our output video, assume input size","      if (!this.options.video.width && !this.options.video.height) {","        this.options.video.width = data.video.resolution.w;","        this.options.video.height = data.video.resolution.h;","      }","","      if (!this._aspectIsEqual(data.video.aspectString, newaspect)) {","        var ardata = this.toAspectRatio(newaspect);","","        if (newaspect === '16:9') {","          // assume conversion from 4:3 to 16:9, pad output video stream left- / right-sided","          var newWidth = parseInt(this.options.video.width / (4 / 3), 10);","          newWidth += (newWidth % 2);","          var wdiff = this.options.video.width - newWidth;","          padAmount = parseInt(wdiff / 2, 10);","          padAmount += (padAmount % 2);","","          // set pad filter options","          this.options.video.pad = {","            x: padAmount,","            y: 0,","            w: this.options.video.width,","            h: this.options.video.height","          };","          this.options.video.size = newWidth + 'x' + this.options.video.height;","        } else if (newaspect === '4:3') {","          // assume conversion from 16:9 to 4:3, add padding to top and bottom","          var newHeight = parseInt(this.options.video.height / (4 / 3), 10);","          newHeight -= (newHeight % 2);","          var hdiff = this.options.video.height - newHeight;","          padAmount = parseInt(hdiff / 2, 10);","          padAmount += (padAmount % 2);","","          // set pad filter options","          this.options.video.pad = {","            x: 0,","            y: padAmount,","            w: this.options.video.width,","            h: this.options.video.height","          };","          this.options.video.size = this.options.video.pad.w + 'x' + newHeight;","        }","      }","    } else {","      // aspect ratio could not be read from source file","      return;","    }","  };","","  command.prototype._calculateDimensions = function(data) {","    // load metadata and prepare size calculations","    var fixedWidth = /([0-9]+)x\\?/.exec(this.options.video.size);","    var fixedHeight = /\\?x([0-9]+)/.exec(this.options.video.size);","    var percentRatio = /\\b([0-9]{1,3})%/.exec(this.options.video.size);","","    var resolution = this.options.keepPixelAspect ? data.video.resolution : data.video.resolutionSquare;","    var w, h;","","    if (!resolution) {","      return new Error('could not determine video resolution, check your ffmpeg setup');","    }","","    var ratio, ardata;","    if (fixedWidth && fixedWidth.length > 0) {","      // calculate height of output","      if (!resolution.w) {","        return new Error('could not determine width of source video, aborting execution');","      }","","      ratio = resolution.w / parseInt(fixedWidth[1], 10);","      // if we have an aspect ratio target set, calculate new size using AR","      if (this.options.video.aspect !== undefined) {","        ardata = this.toAspectRatio(this.options.video.aspect);","        if (ardata) {","          w = parseInt(fixedWidth[1], 10);","          h = Math.round((w / ardata.x) * ardata.y);","        } else {","          // aspect ratio could not be parsed, return error","          return new Error('could not parse aspect ratio set using withAspect(), aborting execution');","        }","      } else {","        w = parseInt(fixedWidth[1], 10);","        h = Math.round(resolution.h / ratio);","      }","    } else if (fixedHeight && fixedHeight.length > 0) {","      // calculate width of output","      if (!resolution.h) {","        return new Error('could not determine height of source video, aborting execution');","      }","","      ratio = resolution.h / parseInt(fixedHeight[1], 10);","","      // if we have an aspect ratio target set, calculate new size using AR","      if (this.options.video.aspect !== undefined) {","        ardata = this.toAspectRatio(this.options.video.aspect);","        if (ardata) {","          h = parseInt(fixedHeight[1], 10);","          w = Math.round((h / ardata.y) * ardata.x);","        } else {","          // aspect ratio could not be parsed, return error","          return new Error('could not parse aspect ratio set using withAspect(), aborting execution');","        }","      } else {","        w = Math.round(resolution.w / ratio);","        h = parseInt(fixedHeight[1], 10);","      }","    } else if (percentRatio && percentRatio.length > 0) {","      // calculate both height and width of output","      if (!resolution.w || !resolution.h) {","        return new Error('could not determine resolution of source video, aborting execution');","      }","","      ratio = parseInt(percentRatio[1], 10) / 100;","      w = Math.round(resolution.w * ratio);","      h = Math.round(resolution.h * ratio);","    } else {","      return new Error('could not determine type of size string, aborting execution');","    }","","    // for video resizing, width and height have to be a multiple of 2","    if (w % 2 === 1) {","      w -= 1;","    }","    if (h % 2 === 1) {","      h -= 1;","    }","","    this.options.video.size = w + 'x' + h;","","    this.options.video.width = w;","    this.options.video.height = h;","","  };","  ","  command.prototype.calculateDimensions = command.prototype._calculateDimensions;","};",""];
_$jscoverage_done("lib/calculate.js", 1);
exports = module.exports = function Calculate(command) {
    _$jscoverage_done("lib/calculate.js", 2);
    command.prototype._aspectIsEqual = function(ar1, ar2) {
        _$jscoverage_done("lib/calculate.js", 3);
        var p1 = this.toAspectRatio(ar1);
        _$jscoverage_done("lib/calculate.js", 4);
        var p2 = this.toAspectRatio(ar2);
        _$jscoverage_done("lib/calculate.js", 5);
        if (_$jscoverage_done("lib/calculate.js", 5, p1 === undefined) || _$jscoverage_done("lib/calculate.js", 5, p2 === undefined)) {
            _$jscoverage_done("lib/calculate.js", 6);
            return false;
        } else {
            _$jscoverage_done("lib/calculate.js", 8);
            return p1.x === p2.x && p1.y === p2.y;
        }
    };
    _$jscoverage_done("lib/calculate.js", 12);
    command.prototype._calculatePadding = function(data) {
        _$jscoverage_done("lib/calculate.js", 13);
        if (_$jscoverage_done("lib/calculate.js", 13, data.video.aspect)) {
            _$jscoverage_done("lib/calculate.js", 14);
            var newaspect, padAmount;
            _$jscoverage_done("lib/calculate.js", 16);
            if (_$jscoverage_done("lib/calculate.js", 16, this.options.video.aspect) && _$jscoverage_done("lib/calculate.js", 16, !this.options.video.size)) {
                _$jscoverage_done("lib/calculate.js", 17);
                newaspect = this.options.video.aspect;
            } else {
                _$jscoverage_done("lib/calculate.js", 18);
                if (_$jscoverage_done("lib/calculate.js", 18, !this.options.video.aspect)) {
                    _$jscoverage_done("lib/calculate.js", 20);
                    var ratio = this.gcd(this.options.video.width, this.options.video.height);
                    _$jscoverage_done("lib/calculate.js", 21);
                    newaspect = this.options.video.width / ratio + ":" + this.options.video.height / ratio;
                } else {
                    _$jscoverage_done("lib/calculate.js", 24);
                    newaspect = this.options.video.aspect;
                }
            }
            _$jscoverage_done("lib/calculate.js", 28);
            if (_$jscoverage_done("lib/calculate.js", 28, !this.options.video.width) && _$jscoverage_done("lib/calculate.js", 28, !this.options.video.height)) {
                _$jscoverage_done("lib/calculate.js", 29);
                this.options.video.width = data.video.resolution.w;
                _$jscoverage_done("lib/calculate.js", 30);
                this.options.video.height = data.video.resolution.h;
            }
            _$jscoverage_done("lib/calculate.js", 33);
            if (_$jscoverage_done("lib/calculate.js", 33, !this._aspectIsEqual(data.video.aspectString, newaspect))) {
                _$jscoverage_done("lib/calculate.js", 34);
                var ardata = this.toAspectRatio(newaspect);
                _$jscoverage_done("lib/calculate.js", 36);
                if (_$jscoverage_done("lib/calculate.js", 36, newaspect === "16:9")) {
                    _$jscoverage_done("lib/calculate.js", 38);
                    var newWidth = parseInt(this.options.video.width / (4 / 3), 10);
                    _$jscoverage_done("lib/calculate.js", 39);
                    newWidth += newWidth % 2;
                    _$jscoverage_done("lib/calculate.js", 40);
                    var wdiff = this.options.video.width - newWidth;
                    _$jscoverage_done("lib/calculate.js", 41);
                    padAmount = parseInt(wdiff / 2, 10);
                    _$jscoverage_done("lib/calculate.js", 42);
                    padAmount += padAmount % 2;
                    _$jscoverage_done("lib/calculate.js", 45);
                    this.options.video.pad = {
                        x: padAmount,
                        y: 0,
                        w: this.options.video.width,
                        h: this.options.video.height
                    };
                    _$jscoverage_done("lib/calculate.js", 51);
                    this.options.video.size = newWidth + "x" + this.options.video.height;
                } else {
                    _$jscoverage_done("lib/calculate.js", 52);
                    if (_$jscoverage_done("lib/calculate.js", 52, newaspect === "4:3")) {
                        _$jscoverage_done("lib/calculate.js", 54);
                        var newHeight = parseInt(this.options.video.height / (4 / 3), 10);
                        _$jscoverage_done("lib/calculate.js", 55);
                        newHeight -= newHeight % 2;
                        _$jscoverage_done("lib/calculate.js", 56);
                        var hdiff = this.options.video.height - newHeight;
                        _$jscoverage_done("lib/calculate.js", 57);
                        padAmount = parseInt(hdiff / 2, 10);
                        _$jscoverage_done("lib/calculate.js", 58);
                        padAmount += padAmount % 2;
                        _$jscoverage_done("lib/calculate.js", 61);
                        this.options.video.pad = {
                            x: 0,
                            y: padAmount,
                            w: this.options.video.width,
                            h: this.options.video.height
                        };
                        _$jscoverage_done("lib/calculate.js", 67);
                        this.options.video.size = this.options.video.pad.w + "x" + newHeight;
                    }
                }
            }
        } else {
            _$jscoverage_done("lib/calculate.js", 72);
            return;
        }
    };
    _$jscoverage_done("lib/calculate.js", 76);
    command.prototype._calculateDimensions = function(data) {
        _$jscoverage_done("lib/calculate.js", 78);
        var fixedWidth = /([0-9]+)x\?/.exec(this.options.video.size);
        _$jscoverage_done("lib/calculate.js", 79);
        var fixedHeight = /\?x([0-9]+)/.exec(this.options.video.size);
        _$jscoverage_done("lib/calculate.js", 80);
        var percentRatio = /\b([0-9]{1,3})%/.exec(this.options.video.size);
        _$jscoverage_done("lib/calculate.js", 82);
        var resolution = this.options.keepPixelAspect ? data.video.resolution : data.video.resolutionSquare;
        _$jscoverage_done("lib/calculate.js", 83);
        var w, h;
        _$jscoverage_done("lib/calculate.js", 85);
        if (_$jscoverage_done("lib/calculate.js", 85, !resolution)) {
            _$jscoverage_done("lib/calculate.js", 86);
            return new Error("could not determine video resolution, check your ffmpeg setup");
        }
        _$jscoverage_done("lib/calculate.js", 89);
        var ratio, ardata;
        _$jscoverage_done("lib/calculate.js", 90);
        if (_$jscoverage_done("lib/calculate.js", 90, fixedWidth) && _$jscoverage_done("lib/calculate.js", 90, fixedWidth.length > 0)) {
            _$jscoverage_done("lib/calculate.js", 92);
            if (_$jscoverage_done("lib/calculate.js", 92, !resolution.w)) {
                _$jscoverage_done("lib/calculate.js", 93);
                return new Error("could not determine width of source video, aborting execution");
            }
            _$jscoverage_done("lib/calculate.js", 96);
            ratio = resolution.w / parseInt(fixedWidth[1], 10);
            _$jscoverage_done("lib/calculate.js", 98);
            if (_$jscoverage_done("lib/calculate.js", 98, this.options.video.aspect !== undefined)) {
                _$jscoverage_done("lib/calculate.js", 99);
                ardata = this.toAspectRatio(this.options.video.aspect);
                _$jscoverage_done("lib/calculate.js", 100);
                if (_$jscoverage_done("lib/calculate.js", 100, ardata)) {
                    _$jscoverage_done("lib/calculate.js", 101);
                    w = parseInt(fixedWidth[1], 10);
                    _$jscoverage_done("lib/calculate.js", 102);
                    h = Math.round(w / ardata.x * ardata.y);
                } else {
                    _$jscoverage_done("lib/calculate.js", 105);
                    return new Error("could not parse aspect ratio set using withAspect(), aborting execution");
                }
            } else {
                _$jscoverage_done("lib/calculate.js", 108);
                w = parseInt(fixedWidth[1], 10);
                _$jscoverage_done("lib/calculate.js", 109);
                h = Math.round(resolution.h / ratio);
            }
        } else {
            _$jscoverage_done("lib/calculate.js", 111);
            if (_$jscoverage_done("lib/calculate.js", 111, fixedHeight) && _$jscoverage_done("lib/calculate.js", 111, fixedHeight.length > 0)) {
                _$jscoverage_done("lib/calculate.js", 113);
                if (_$jscoverage_done("lib/calculate.js", 113, !resolution.h)) {
                    _$jscoverage_done("lib/calculate.js", 114);
                    return new Error("could not determine height of source video, aborting execution");
                }
                _$jscoverage_done("lib/calculate.js", 117);
                ratio = resolution.h / parseInt(fixedHeight[1], 10);
                _$jscoverage_done("lib/calculate.js", 120);
                if (_$jscoverage_done("lib/calculate.js", 120, this.options.video.aspect !== undefined)) {
                    _$jscoverage_done("lib/calculate.js", 121);
                    ardata = this.toAspectRatio(this.options.video.aspect);
                    _$jscoverage_done("lib/calculate.js", 122);
                    if (_$jscoverage_done("lib/calculate.js", 122, ardata)) {
                        _$jscoverage_done("lib/calculate.js", 123);
                        h = parseInt(fixedHeight[1], 10);
                        _$jscoverage_done("lib/calculate.js", 124);
                        w = Math.round(h / ardata.y * ardata.x);
                    } else {
                        _$jscoverage_done("lib/calculate.js", 127);
                        return new Error("could not parse aspect ratio set using withAspect(), aborting execution");
                    }
                } else {
                    _$jscoverage_done("lib/calculate.js", 130);
                    w = Math.round(resolution.w / ratio);
                    _$jscoverage_done("lib/calculate.js", 131);
                    h = parseInt(fixedHeight[1], 10);
                }
            } else {
                _$jscoverage_done("lib/calculate.js", 133);
                if (_$jscoverage_done("lib/calculate.js", 133, percentRatio) && _$jscoverage_done("lib/calculate.js", 133, percentRatio.length > 0)) {
                    _$jscoverage_done("lib/calculate.js", 135);
                    if (_$jscoverage_done("lib/calculate.js", 135, !resolution.w) || _$jscoverage_done("lib/calculate.js", 135, !resolution.h)) {
                        _$jscoverage_done("lib/calculate.js", 136);
                        return new Error("could not determine resolution of source video, aborting execution");
                    }
                    _$jscoverage_done("lib/calculate.js", 139);
                    ratio = parseInt(percentRatio[1], 10) / 100;
                    _$jscoverage_done("lib/calculate.js", 140);
                    w = Math.round(resolution.w * ratio);
                    _$jscoverage_done("lib/calculate.js", 141);
                    h = Math.round(resolution.h * ratio);
                } else {
                    _$jscoverage_done("lib/calculate.js", 143);
                    return new Error("could not determine type of size string, aborting execution");
                }
            }
        }
        _$jscoverage_done("lib/calculate.js", 147);
        if (_$jscoverage_done("lib/calculate.js", 147, w % 2 === 1)) {
            _$jscoverage_done("lib/calculate.js", 148);
            w -= 1;
        }
        _$jscoverage_done("lib/calculate.js", 150);
        if (_$jscoverage_done("lib/calculate.js", 150, h % 2 === 1)) {
            _$jscoverage_done("lib/calculate.js", 151);
            h -= 1;
        }
        _$jscoverage_done("lib/calculate.js", 154);
        this.options.video.size = w + "x" + h;
        _$jscoverage_done("lib/calculate.js", 156);
        this.options.video.width = w;
        _$jscoverage_done("lib/calculate.js", 157);
        this.options.video.height = h;
    };
    _$jscoverage_done("lib/calculate.js", 161);
    command.prototype.calculateDimensions = command.prototype._calculateDimensions;
};